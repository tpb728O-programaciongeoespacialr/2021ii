{
  "articles": [
    {
      "path": "about.html",
      "title": "About this site",
      "description": "Some additional details about the website",
      "author": [],
      "contents": "\r\n\r\n\r\n\r\n",
      "last_modified": "2021-08-11T00:36:16-06:00"
    },
    {
      "path": "index.html",
      "title": "TPB728O Programación de aplicaciones geoespaciales en R 2021-II",
      "description": "Curso TPB728O Programación de aplicaciones geoespaciales en R. Maestría en Sistemas de Información Geográfica y Teledetección. Universidad de Costa Rica (UCR) y Universidad Nacional (UNA).\n",
      "author": [
        {
          "name": "Manuel Vargas",
          "url": "https://github.com/mfvargas"
        }
      ],
      "contents": "\r\n\r\nContents\r\nDescripción\r\nPrograma\r\nLecciones\r\nTareas\r\nRecursos\r\n\r\nDescripción\r\nEste es un curso sobre desarrollo de aplicaciones geoespaciales en el lenguaje de programación R. Forma parte de la Maestría en Sistemas de Información Geográfica y Teledetección de la Universidad de Costa Rica (UCR) y de la Universidad Nacional (UNA).\r\nSe estudian los fundamentos del lenguaje R, sus bibliotecas geoespaciales y sus capacidades para generar gráficos estadísticos. El enfoque del curso es teórico-práctico, con lecciones teóricas combinadas con ejercicios de programación en los cuales los estudiantes aplicarán en diversos escenarios de procesamiento de datos los conocimientos adquiridos.\r\nEste sitio web corresponde al curso impartido durante el segundo ciclo lectivo de 2021. Para ver las versiones de otros ciclos lectivos, puede visitar el sitio web general del curso.\r\nPrograma\r\nPrograma del curso\r\nLecciones\r\n01 R - Conceptos básicos (RStudio, funciones predefinidas, tipos de datos)02 R - Conceptos básicos (definición de funciones, condicionales, ciclos)03 R Markdown04 blogdown05 R - Graficación\r\nTareas\r\n01 R Markdown\r\nRecursos\r\nRecursos adicionales a la bibliografía del curso\r\n\r\n\r\n\r\n",
      "last_modified": "2021-09-08T16:38:57-06:00"
    },
    {
      "path": "leccion-01-r-conceptosbasicos.html",
      "title": "R - Conceptos básicos",
      "author": [],
      "contents": "\r\n\r\nContents\r\nResumen\r\nTrabajo previo\r\nCaracterísticas generales de R\r\nEl ambiente de desarrollo RStudio\r\nFunciones\r\nEjemplos\r\nArgumentos\r\nAyuda\r\nConjuntos de datos para pruebas\r\n\r\nPaquetes\r\nTipos de datos\r\nTipos básicos\r\nNúmeros\r\nCaracteres\r\nLógicos\r\nVectores\r\nDefinición\r\nIndexación\r\nOperaciones\r\n\r\nMatrices\r\nDefinición\r\nIndexación\r\nOperaciones\r\n\r\n\r\nTipos compuestos\r\nFactores\r\nDefinición\r\nOperaciones\r\n\r\nData Frames\r\nDefinición\r\nIndexación\r\nOperaciones\r\n\r\n\r\nOtros\r\nFechas\r\nOperaciones\r\n\r\n\r\n\r\n\r\nResumen\r\nEn esta lección, se estudiarán los conceptos básicos del lenguaje de programación R, incluyendo:\r\nCaracterísticas generales de R.\r\nEl ambiente de desarrollo RStudio.\r\nFunciones y paquetes.\r\nTipos de datos.\r\nTrabajo previo\r\nInstale R y RStudio en su computadora. Puede aceptar las opciones que los programas instaladores le presentan por defecto. Si lo desea, puede ver los siguientes videos que muestran detalladamente el proceso de instalación en los sistemas operativos Windows, macOS y Linux (Ubuntu).\r\nInstale el sistema para control de versiones Git.\r\nLea los capítulos del 1 al 12 de Grolemund, G., & Wickham, H. (2014). Hands-On Programming with R.\r\nCaracterísticas generales de R\r\nR es un lenguaje de programación enfocado en análisis estadístico. Es ampliamente utilizado en diversas áreas de investigación, entre las que pueden mencionarse aprendizaje automático (machine learning), ciencia de datos (data science) y big data, con aplicaciones en campos como biomedicina, bioinformática y finanzas, entre muchos otros. Fue creado por Ross Ihaka y Robert Gentleman en la Universidad de Auckland, Nueva Zelanda, en 1993.\r\nAlgunas de las principales características de este lenguaje son:\r\nEs interpretado: las instrucciones se traducen una por una a lenguaje máquina, a diferencia de los lenguajes compilados, que traducen de manera conjunta las instrucciones de una unidad completa (ej. un programa o una biblioteca). Los lenguajes interpretados tienden a ser más lentos que los compilados, pero también son más flexibles.\r\nEs multiplataforma: puede ejecutarse en los sistemas operativos más populares (ej. Microsoft Windows, macOS, Linux).\r\nTiene un sistema de tipos de datos dinámico: las variables pueden tomar diferentes tipos de datos (ej. textuales, numéricos) durante la ejecución del programa, a diferencia del caso de un sistema de tipos de datos estático, en el que las variables solo pueden tener un tipo de datos.\r\nSoporta varios paradigmas de programación: los paradigmas son estilos o enfoques teóricos de programación. R soporta los paradigmas de programación funcional, programación orientada a objetos, programación imperativa y programación procedimental.\r\nR es un proyecto de software libre que se comparte mediante una licencia GNU General Public Licence (GNU GPL). Esta característica permite que la funcionalidad original de R pueda ser ampliada mediante bibliotecas o paquetes desarrollados por la comunidad de programadores.\r\nPara programar en R, puede utilizarse una interfaz de línea de comandos y también ambientes de desarrollo integrados (IDE, integrated development environment) como Jupyter o RStudio.\r\nEl ambiente de desarrollo RStudio\r\nRStudio es el IDE más popular para el lenguaje R. Está disponible en una versión de escritorio (RStudio Desktop) y en una versión para servidor (RStudio Server). Esta última permite la conexión de varios usuarios a través de un navegador web. RStudio se ofrece también como un servicio en la nube, a través de RStudio Cloud.\r\n\r\nInterfaz de RStudio.\r\nAdemás de edición de código fuente en R (y otros lenguajes), RStudio contiene capacidades para depurar código y visualizar datos en formatos tabulares, gráficos y de mapas.\r\nFunciones\r\nR, al igual que otros lenguajes de programación, estructura su funcionalidad en unidades de código fuente llamadas funciones. Cada función realiza una tarea específica como, por ejemplo, un cálculo matemático y, por lo general, retorna un valor como salida. Todas las funciones tienen un nombre y, opcionalmente, un conjunto de argumentos que especifican los datos de entrada que procesa la función. Los argumentos se escriben entre paréntesis redondos (()) y estos siempre deben incluirse, aún en el caso de que la función no tenga ningún argumento. Si la función tiene varios argumentos, deben separarse mediante comas (,).\r\nEjemplos\r\nLa función print() recibe como argumento un valor (ej. un texto o un número) para imprimirlo en la pantalla. En el siguiente fragmento de código en R, se utiliza print() para imprimir la hilera “Hola mundo”. Nótese el uso del símbolo # para comentarios (i.e. texto que no es código ejecutable).\r\n\r\n\r\n# Impresión de una hilera de caracteres\r\nprint(\"Hola mundo\")\r\n\r\n\r\n[1] \"Hola mundo\"\r\n\r\nLa función mean() retorna la media aritmética del argumento de entrada. En el siguiente ejemplo, se calcula la media de los números de un vector creado a su vez con la función c().\r\n\r\n\r\n# Media aritmética\r\nmean(c(2, 4, 5, 9))\r\n\r\n\r\n[1] 5\r\n\r\nLa función getwd() (get working directory) retorna la ruta del directorio de trabajo de la sesión actual de R. Este es el directorio en el cual R espera encontrar, por ejemplo, archivos de datos.\r\n\r\n\r\n# Impresión del directorio de trabajo\r\ngetwd()\r\n\r\n\r\n[1] \"C:/Users/mfvargas/tpb728O-programaciongeoespacialr/2021ii\"\r\n\r\nLa función setwd() (set working directory) establece la ruta del directorio de trabajo de la sesión actual de R. Como argumento, recibe una hilera de texto con la ruta.\r\nNote las barras utilizadas para separar los subdirectorios: / (no \\)\r\n\r\n\r\n# Definición del directorio de trabajo (la ruta debe existir)\r\nsetwd(\"C:/Users/mfvargas\")\r\n\r\n# Directorio con espacios, tildes y eñes\r\nsetwd(\"C:/Users/mfvargas/mi directorio con espacios y tildes áéíóúñ\")\r\n\r\n\r\n\r\n Ejercicio:\r\na. Obtenga la ruta de su directorio de trabajo con la función getwd().\r\nb. Si lo desea, cambie la ruta de su directorio de trabajo con la función setwd(). Verifique el cambio con getwd().\r\nArgumentos\r\nLos argumentos de las funciones tienen nombres que pueden especificarse, en caso de ser necesario. En algunos casos, el orden y el tipo de datos de los argumentos permiten que el interpretador de R conozca cuál es cada uno.\r\nEn el siguiente ejemplo, se utilizan los argumentos x, xlab y ylab de la función plot() para especificar la fuente de datos y las etiquetas de los ejes x e y de un gráfico de dispersión.\r\n\r\n\r\n# Gráfico de dispersón del conjunto de datos \"cars\" con etiquetas en los ejes x e y\r\nplot(\r\n  x=cars, \r\n  xlab=\"Velocidad (mph)\", \r\n  ylab=\"Distancia requerida para frenar (pies)\"\r\n)\r\n\r\n\r\n\r\n\r\n Ejercicio: estudie la documentación de la función plot() y agregue al gráfico anterior:\r\na. Un título.\r\nb. Un subtítulo.\r\nAyuda\r\nPara obtener ayuda de una función desde la línea de comandos de R, puede utilizarse un signo de pregunta (?) seguido del nombre de la función o bien la función help(). Por ejemplo:\r\n\r\n\r\n# Ayuda de la función setwd()\r\n?setwd\r\nhelp(setwd)\r\n\r\n\r\n\r\nAdicionalmente, puede utilizarse la función apropos() para buscar funciones por palabras clave.\r\n\r\n\r\n# Búsqueda, por palabras clave, de funciones relacionadas con \"mean\" (media aritmética). Note las comillas (\"\").\r\napropos(\"mean\")\r\n\r\n\r\n [1] \".colMeans\"     \".rowMeans\"     \"colMeans\"      \"kmeans\"       \r\n [5] \"mean\"          \"mean.Date\"     \"mean.default\"  \"mean.difftime\"\r\n [9] \"mean.POSIXct\"  \"mean.POSIXlt\"  \"rowMeans\"      \"weighted.mean\"\r\n\r\nLa función example() presenta ejemplos sobre el uso de una función.\r\n\r\n\r\n# Ejemplos de uso de la función mean()\r\nexample(\"mean\")\r\n\r\n\r\n\r\nmean> x <- c(0:10, 50)\r\n\r\nmean> xm <- mean(x)\r\n\r\nmean> c(xm, mean(x, trim = 0.10))\r\n[1] 8.75 5.50\r\n\r\nPor otra parte, el sitio All R Documentation reúne documentación de funciones de una gran cantidad de paquetes de R. También puede obtenerse ayuda sobre una función en los buscadores de Internet (ej. Google), además de ejemplos, tutoriales y otros materiales de apoyo.\r\nConjuntos de datos para pruebas\r\nPara efectos de pruebas y ejemplos, la distribución base de R incorpora varios conjuntos de datos que pueden listarse con la función data(). Para obtener información acerca de un conjunto de datos en particular, puede utilizarse el operador ?.\r\n\r\n\r\n# Información sobre todos los conjuntos de datos incorporados en la distribución base de R\r\ndata()\r\n\r\n# Información sobre el cojunto de datos \"cars\"\r\n?cars\r\n\r\n# Información sobre el cojunto de datos \"Iris\"\r\n?iris\r\n\r\n\r\n\r\nPaquetes\r\nLas funciones de R se distribuyen mediante paquetes. Cada paquete contiene un conjunto de funciones y estructuras de datos relacionadas entre sí. Para utilizar un paquete, primero debe cargarse (en la memoria del computador) con la función library().\r\n\r\n\r\n# Carga del paquete stats\r\nlibrary(stats)\r\n\r\n\r\n\r\nAlgunos paquetes están contenidos en la distribución base de R y otros deben instalarse de manera separada con la función install.packages().\r\nEn el siguiente ejemplo, se instala el paquete PASWR2, el cual contiene el conjunto de datos TITANIC3.\r\n\r\n\r\n# Instalación del paquete PASWR2 (note las comillas)\r\ninstall.packages(\"PASWR2\")\r\n\r\n\r\n\r\nEl paquete PASWR2 se carga con library().\r\n\r\n\r\n# Carga de PASWR2\r\nlibrary(PASWR2)\r\n\r\n\r\n\r\nEl conjunto de datos TITANIC3 puede visualizarse con la función View().\r\n\r\n\r\n# Visualización del conjunto de datos TITANIC3\r\nView(TITANIC3)\r\n\r\n\r\n\r\nPara visualizar gráficamente el conjunto de datos, el siguiente gráfico de barras muestra la distribución de pasajeros por clase.\r\n\r\n\r\n# Cantidades de pasajeros por clase\r\ntable(TITANIC3$pclass)\r\n\r\n\r\n\r\n1st 2nd 3rd \r\n323 277 709 \r\n\r\n\r\n# Gráfico de barras por clase de pasajero\r\nbarplot(\r\n  height=table(TITANIC3$pclass),\r\n  main=\"Distribución de pasajeros del Titanic por clase\",\r\n  xlab = \"Clase\",\r\n  ylab = \"Cantidad de pasajeros\"  \r\n)\r\n\r\n\r\n\r\n\r\nLa distribución por cada clase puede dividirse en fallecidos y sobrevivientes.\r\n\r\n\r\n# Cantidades de pasajeros fallecidos y sobrevivientes por clase\r\n# (0 corresponde a fallecidos y 1 a sobrevivientes)\r\ntable(TITANIC3$survived, TITANIC3$pclass)\r\n\r\n\r\n   \r\n    1st 2nd 3rd\r\n  0 123 158 528\r\n  1 200 119 181\r\n\r\nEl siguiente gráfico muestra en un gráfico de barras apiladas la distribución de pasajeros sobrevivientes y fallecidos en cada clase.\r\n\r\n\r\n# Gráfico de barras apiladas\r\nbarplot(\r\n  height = table(TITANIC3$survived, TITANIC3$pclass),\r\n  main = \"Distribución de pasajeros fallecidos y sobrevivientes por clase\",\r\n  xlab = \"Clase\",\r\n  ylab = \"Cantidad de pasajeros\",\r\n  col = topo.colors(2)\r\n)\r\n\r\n# Leyenda\r\nlegend(\r\n  x = \"topleft\",\r\n  inset = 0.03,\r\n  legend = c(\"Fallecidos\", \"Sobrevivientes\"),\r\n  fill = topo.colors(2),\r\n  horiz = TRUE\r\n)\r\n\r\n\r\n\r\n\r\nLa misma información se muestra seguidamente en un gráfico de barras agrupadas.\r\n\r\n\r\n# Gráfico de barras agrupadas\r\nbarplot(\r\n  height = table(TITANIC3$survived, TITANIC3$pclass),\r\n  main = \"Distribución de pasajeros fallecidos y sobrevivientes por clase\",\r\n  xlab = \"Clase\",\r\n  ylab = \"Cantidad de pasajeros\",  \r\n  col = topo.colors(2),\r\n  beside = TRUE\r\n)\r\n\r\n# Leyenda\r\nlegend(\r\n  x = \"topleft\",\r\n  inset = 0.03,\r\n  legend = c(\"Fallecidos\", \"Sobrevivientes\"),\r\n  fill = topo.colors(2),\r\n  horiz = TRUE\r\n)\r\n\r\n\r\n\r\n\r\n Ejercicio:\r\na. Muestre la distribución de pasajeros fallecidos y sobrevivientes por sexo en un gráfico de barras apiladas.\r\nb. Muestre la distribución de pasajeros fallecidos y sobrevivientes por sexo en un gráfico de barras agrupadas.\r\nTipos de datos\r\nR puede trabajar con varios tipos de datos básicos, entre los que están números, caracteres (i.e. textos) y lógicos. También puede trabajar con tipos compuestos, como factores y data frames.\r\nR proporciona acceso a los datos a través de objetos. Un objeto es una entidad que tiene asociadas propiedades (i.e. datos) y métodos (i.e. funciones) para manipular esas propiedades. Un objeto puede ser, por ejemplo, un número, una hilera de texto, un vector o una matriz.\r\nHay muchas formas de crear objetos en R. Una de las más sencillas es con los operadores de asignación. Estos son = y <- (o ->). Por ejemplo, las siguientes sentencias crean un número, un texto y un vector.\r\n\r\n\r\n# Número\r\nx <- 10\r\nx\r\n\r\n\r\n[1] 10\r\n\r\n\r\n# Otro número\r\n20 -> y\r\ny\r\n\r\n\r\n[1] 20\r\n\r\n\r\n# Hilera de caracteres\r\nnombre <- 'Manuel'\r\nnombre\r\n\r\n\r\n[1] \"Manuel\"\r\n\r\n\r\n# Vector de hileras de caracteres\r\ndias <- c('Domingo', 'Lunes', 'Martes', 'Miércoles', 'Jueves', 'Viernes', 'Sábado')\r\ndias\r\n\r\n\r\n[1] \"Domingo\"   \"Lunes\"     \"Martes\"    \"Miércoles\" \"Jueves\"   \r\n[6] \"Viernes\"   \"Sábado\"   \r\n\r\nTanto x, como nombre como dias son variables. Una variable es una etiqueta que se le asigna a un objeto. Una variable debe comenzar con una letra.\r\nEl tipo de una variable puede consultarse con la función typeof(). Por ejemplo:\r\n\r\n\r\ntypeof(x)\r\n\r\n\r\n[1] \"double\"\r\n\r\ntypeof(y)\r\n\r\n\r\n[1] \"double\"\r\n\r\ntypeof(nombre)\r\n\r\n\r\n[1] \"character\"\r\n\r\ntypeof(dias)\r\n\r\n\r\n[1] \"character\"\r\n\r\nA continuación, se describen con más detalle algunos de los tipos de datos utilizados en el lenguaje R.\r\nTipos básicos\r\nR define seis tipos de datos básicos. En esta sección, se describen los más utilizados durante este curso.\r\nNúmeros\r\nPueden ser enteros (integer) o decimales (double). Se utilizan en diversos tipos de operaciones, incluyendo las aritméticas (ej. suma, resta, multiplicación, división).\r\n\r\n\r\n# Declaración de variables numéricas\r\nx <- 5\r\ny <- 0.5\r\n\r\n# Suma\r\nx + y\r\n\r\n\r\n[1] 5.5\r\n\r\n\r\n# Tipos de datos numéricos\r\ntypeof(x)\r\n\r\n\r\n[1] \"double\"\r\n\r\ntypeof(y)\r\n\r\n\r\n[1] \"double\"\r\n\r\ntypeof(x + y)\r\n\r\n\r\n[1] \"double\"\r\n\r\nPara declarar números enteros puede usarse el sufijo L o la función as.integer().\r\n\r\n\r\n# Números enteros\r\nx <- 10L\r\ny <- as.integer(15)\r\n\r\n# Multiplicación\r\nx * y\r\n\r\n\r\n[1] 150\r\n\r\n\r\n# Tipos de datos enteros\r\ntypeof(x)\r\n\r\n\r\n[1] \"integer\"\r\n\r\ntypeof(y)\r\n\r\n\r\n[1] \"integer\"\r\n\r\ntypeof(x * y)\r\n\r\n\r\n[1] \"integer\"\r\n\r\nNótese que al declararse una variable numérica, ya sea que tenga o no punto decimal, R la considera por defecto de tipo double. Para que se considere de tipo integer, debe utilizarse el sufijo L o la función as.integer().\r\nCaracteres\r\nSe utilizan para representar textos. Deben estar encerrados entre comillas simples ('') o dobles (\"\").\r\n\r\n\r\n# Hileras de caracteres\r\nnombre <- \"María\"\r\napellido <- \"Pérez\"\r\n\r\n# Concatenación mediante la función paste()\r\npaste(nombre, apellido)\r\n\r\n\r\n[1] \"María Pérez\"\r\n\r\nLógicos\r\nLos objetos lógicos (también llamados booleanos) tienen dos posibles valores: verdadero (TRUE) o falso (FALSE).\r\n\r\n\r\n# Variable lógica\r\na <- 1 < 2\r\na\r\n\r\n\r\n[1] TRUE\r\n\r\n\r\n# Variable lógica\r\nb <- 1 > 2\r\nb\r\n\r\n\r\n[1] FALSE\r\n\r\nLas expresiones lógicas pueden combinarse con operadores como:\r\n& (Y, en inglés AND)\r\n| (O, en inglés OR)\r\n! (NO, en inglés NOT)\r\n\r\n\r\n# Operador lógico AND\r\n(1 < 2) & (3 < 4)\r\n\r\n\r\n[1] TRUE\r\n\r\n\r\n# Operador lógico OR\r\n(2 + 2 == 5) | (20 <= 10)\r\n\r\n\r\n[1] FALSE\r\n\r\n\r\n# Operador lógico NOT\r\n!(2 + 2 == 5)\r\n\r\n\r\n[1] TRUE\r\n\r\nVectores\r\nUn vector es una estructura unidimensional que combina objetos del mismo tipo.\r\nDefinición\r\nLos vectores pueden definirse de varias formas como, por ejemplo, con la función c() (del inglés combine):\r\n\r\n\r\n# Definición de un vector de números\r\nvector_numeros <- c(1, 7, 32, 45, 57)\r\nvector_numeros\r\n\r\n\r\n[1]  1  7 32 45 57\r\n\r\n\r\n# Definición de un vector de hileras de caracteres\r\nvector_nombres <- c(\"Álvaro\", \"Ana\", \"Berta\", \"Bernardo\")\r\nvector_nombres\r\n\r\n\r\n[1] \"Álvaro\"   \"Ana\"      \"Berta\"    \"Bernardo\"\r\n\r\nLos vectores también pueden crearse con el operador :, el cual especifica una secuencia:\r\n\r\n\r\n# Definición de un vector de números con la secuencia de 1 a 10\r\nvector_secuencia <- 1:10\r\nvector_secuencia\r\n\r\n\r\n [1]  1  2  3  4  5  6  7  8  9 10\r\n\r\n\r\n# Definición de un vector de números con la secuencia de -5 a 5\r\nvector_secuencia <- -5:5\r\nvector_secuencia\r\n\r\n\r\n [1] -5 -4 -3 -2 -1  0  1  2  3  4  5\r\n\r\n\r\n# Definición de un vector de números con la secuencia de -0.5 a 3.7\r\nvector_secuencia <- -0.5:3.7\r\nvector_secuencia\r\n\r\n\r\n[1] -0.5  0.5  1.5  2.5  3.5\r\n\r\nLa función seq() también crea un vector con base en una secuencia y permite especificar argumentos como un valor de incremento y la longitud de la secuencia.\r\n\r\n\r\n# Definición de un vector de números con la secuencia de 1 a 10\r\nvector_secuencia <- seq(1, 10)\r\nvector_secuencia\r\n\r\n\r\n [1]  1  2  3  4  5  6  7  8  9 10\r\n\r\n\r\n# Definición de un vector de números con la secuencia de 0.5 a 15.3, con incremento de 2\r\nvector_secuencia <- seq(from=0.5, to=15.3, by=2)\r\nvector_secuencia\r\n\r\n\r\n[1]  0.5  2.5  4.5  6.5  8.5 10.5 12.5 14.5\r\n\r\n\r\n# Definición de un vector de números con la secuencia de 1.5 a 9.4, con longitud de 4\r\nvector_secuencia <- seq(from=1.5, to=9.4, length.out=4)\r\nvector_secuencia\r\n\r\n\r\n[1] 1.500000 4.133333 6.766667 9.400000\r\n\r\nIndexación\r\nLos elementos de un vector se acceden a través de sus índices (i.e. posiciones). La primera posición corresponde al índice 1, la segunda al índice 2 y así sucesivamente. Los índices se especifican entre paréntesis cuadrados ([]), ya sea para una posición específica o para un rango de posiciones. También es posible especificar los índices que se desea excluir.\r\n\r\n\r\n# Vector de nombres de países\r\npaises <- c(\"Argentina\", \"Francia\", \"China\", \"Australia\", \"México\")\r\npaises\r\n\r\n\r\n[1] \"Argentina\" \"Francia\"   \"China\"     \"Australia\" \"México\"   \r\n\r\n\r\n# Elemento en el índice 3\r\npaises[3]\r\n\r\n\r\n[1] \"China\"\r\n\r\nEl operador : puede utilizarse para especificar un rango de índices:\r\n\r\n\r\n# Elementos entre los índices 2 y 4 (2, 3 y 4)\r\npaises[2:4]\r\n\r\n\r\n[1] \"Francia\"   \"China\"     \"Australia\"\r\n\r\nCon la función c(), es posible especificar un conjunto de índices particulares:\r\n\r\n\r\n# Elementos entre los índices 1, 4 y 5\r\npaises[c(1, 4, 5)]\r\n\r\n\r\n[1] \"Argentina\" \"Australia\" \"México\"   \r\n\r\nLos números negativos pueden usarse para excluir índices:\r\n\r\n\r\n# Exclusión de los índices 3 y 4\r\npaises[c(-3, -4)]\r\n\r\n\r\n[1] \"Argentina\" \"Francia\"   \"México\"   \r\n\r\nLos valores lógicos TRUE y FALSE también pueden usarse para incluir y excluir índices de un vector:\r\n\r\n\r\n# Se incluyen los índices 1, 2 y 4; y se excluyen los índices 3 y 5\r\npaises[c(TRUE, TRUE, FALSE, TRUE, FALSE)]\r\n\r\n\r\n[1] \"Argentina\" \"Francia\"   \"Australia\"\r\n\r\nOperaciones\r\nEn los vectores pueden aplicarse operaciones aritméticas:\r\n\r\n\r\na <- c(1, 3, 5, 7)\r\nb <- c(2, 4, 6, 8)\r\n\r\n# Suma de vectores\r\na + b\r\n\r\n\r\n[1]  3  7 11 15\r\n\r\n\r\n# Multiplicación de vectores\r\na * b\r\n\r\n\r\n[1]  2 12 30 56\r\n\r\nY también pueden realizarse operaciones relacionales:\r\n\r\n\r\n# Comparación con el operador <\r\na < b\r\n\r\n\r\n[1] TRUE TRUE TRUE TRUE\r\n\r\nMatrices\r\nUna matriz es una estructura bidimensional de filas y columnas.\r\nDefinición\r\nLas matrices se definen mediante la función matrix().\r\n\r\n\r\n# Definición de una matriz de 3 x 3 con elementos de la secuencia 1:9 distribuidos en las columnas\r\nm <- matrix(1:9, nrow=3, ncol=3)\r\nm\r\n\r\n\r\n     [,1] [,2] [,3]\r\n[1,]    1    4    7\r\n[2,]    2    5    8\r\n[3,]    3    6    9\r\n\r\n\r\n# Definición de una matriz de 3 x 3 con elementos de la secuencia 1:9 distribuidos en las filas\r\nm <- matrix(1:9, nrow=3, ncol=3, byrow=TRUE)\r\nm\r\n\r\n\r\n     [,1] [,2] [,3]\r\n[1,]    1    2    3\r\n[2,]    4    5    6\r\n[3,]    7    8    9\r\n\r\n\r\n# Definición de una matriz de 3 x 2 con nombres para las filas y las columnas\r\ndatos <- c(18, 500, 25, 1000, 30, 2000)\r\nfilas <- c(\"Ana\", \"Mario\", \"Laura\")\r\ncolumnas <- c(\"Edad\", \"Salario\")\r\n\r\nm <- matrix(datos, nrow=3, ncol=2, byrow=TRUE, dimnames=list(filas, columnas))\r\nm\r\n\r\n\r\n      Edad Salario\r\nAna     18     500\r\nMario   25    1000\r\nLaura   30    2000\r\n\r\nLa función list() se utiliza, en este caso, para combinar vectores. En general, se usa para combinar datos de cualquier tipo.\r\nIndexación\r\nLa indexación de matrices es similar a la de vectores, pero deben especificarse índices tanto para filas como para columnas.\r\n\r\n\r\n# Elemento en la posición [2,2] (segunda fila, segunda columna)\r\nm[2, 2]\r\n\r\n\r\n[1] 1000\r\n\r\n\r\n# Elementos de la primera fila\r\nm[1,]\r\n\r\n\r\n   Edad Salario \r\n     18     500 \r\n\r\n\r\n# Elementos de la segunda columna\r\nm[, 2]\r\n\r\n\r\n  Ana Mario Laura \r\n  500  1000  2000 \r\n\r\n\r\n# Elementos de las filas 1 y 2\r\nm[1:2, ]\r\n\r\n\r\n      Edad Salario\r\nAna     18     500\r\nMario   25    1000\r\n\r\n\r\n# Elementos de la fila \"Mario\"\r\nm[\"Mario\", ]\r\n\r\n\r\n   Edad Salario \r\n     25    1000 \r\n\r\n\r\n# Elementos de la columna \"Salario\"\r\nm[, \"Salario\"]\r\n\r\n\r\n  Ana Mario Laura \r\n  500  1000  2000 \r\n\r\nOperaciones\r\nDe manera similar a los vectores, en las matrices pueden realizarse operaciones aritméticas y relacionales.\r\n\r\n\r\na <- matrix(1:4, nrow=2, ncol=2)\r\na\r\n\r\n\r\n     [,1] [,2]\r\n[1,]    1    3\r\n[2,]    2    4\r\n\r\n\r\nb <- matrix(5:8, nrow=2, ncol=2)\r\nb\r\n\r\n\r\n     [,1] [,2]\r\n[1,]    5    7\r\n[2,]    6    8\r\n\r\n\r\n# Suma de matrices\r\na + b\r\n\r\n\r\n     [,1] [,2]\r\n[1,]    6   10\r\n[2,]    8   12\r\n\r\n\r\n# Multiplicación de matrices\r\na * b\r\n\r\n\r\n     [,1] [,2]\r\n[1,]    5   21\r\n[2,]   12   32\r\n\r\n\r\n# Comparación de matrices con el operador >\r\na > b\r\n\r\n\r\n      [,1]  [,2]\r\n[1,] FALSE FALSE\r\n[2,] FALSE FALSE\r\n\r\nTipos compuestos\r\nFactores\r\nLos factores se utilizan para representar datos categóricos. Un factor corresponde a un conjunto de categorías correspondientes a un concepto (ej. [“Sí”, “No”], [“Casado”, “Soltero”], [“Alto”, “Medio”, “Bajo”]).\r\nInternamente, los factores se representan en R como números enteros con etiquetas asociadas. A pesar de que los factores parecen (y pueden funcionar como) hileras de caracteres, en realidad son números y debe tenerse cuidado de no manejarlos como caracteres.\r\nLos elementos de un factor se denominan niveles (levels) y, por defecto, se almacenan en orden alfabético.\r\nDefinición\r\nUn factor se crea con la función factor().\r\n\r\n\r\n# Factor de valores de sexo\r\nsexo <- factor(c(\"Masculino\", \"Femenino\", \"Femenino\", \"Masculino\"))\r\n\r\n\r\n\r\nOperaciones\r\nR proporciona una gran variedad de funciones para manejar factores. Seguidamente, se ejemplifican algunas de estas.\r\n\r\n\r\n# Etiquetas de los niveles\r\nlevels(sexo)\r\n\r\n\r\n[1] \"Femenino\"  \"Masculino\"\r\n\r\n\r\n# Cantidad de niveles\r\nnlevels(sexo)\r\n\r\n\r\n[1] 2\r\n\r\n\r\n# Conteo de elementos de cada uno de los niveles del factor\r\ntable(sexo)\r\n\r\n\r\nsexo\r\n Femenino Masculino \r\n        2         2 \r\n\r\nData Frames\r\nLos data frames son estructuras bidimensionales compuestas por varios vectores, de manera similar a una matriz. Por lo general, las filas de la matriz corresponden a observaciones (o cases) y las columnas a variables. La definición de un data frame puede incluir nombres para cada observación y para cada variable. Los data frames implementan un conjunto de funciones similares a las de una hoja electrónica o la tabla de una base de datos relacional. Son fundamentales para el manejo de datos en R.\r\nDefinición\r\nLa función data.frame() crea un data frame a partir de vectores que serán las columnas del data frame.\r\n\r\n\r\n# Vector de nombres de países\r\npaises <- c(\"PAN\", \"CRI\", \"NIC\", \"SLV\", \"HND\", \"GTM\", \"BLZ\", \"DOM\")\r\n\r\n# Vector de cantidades de habitantes de cada país (en millones)\r\npoblaciones <- c(4.1, 5.0, 6.2, 6.4, 9.2, 16.9, 0.3, 10.6)\r\n\r\n# Creación de un data frame a partir de los dos vectores\r\npoblaciones_paises <- \r\n  data.frame(\r\n    pais = paises, \r\n    poblacion = poblaciones\r\n  )\r\n\r\n# Impresión del data frame\r\npoblaciones_paises\r\n\r\n\r\n  pais poblacion\r\n1  PAN       4.1\r\n2  CRI       5.0\r\n3  NIC       6.2\r\n4  SLV       6.4\r\n5  HND       9.2\r\n6  GTM      16.9\r\n7  BLZ       0.3\r\n8  DOM      10.6\r\n\r\nIndexación\r\nLos datos de un data frame pueden accederse principalmente de dos formas. La primera es mediante la misma sintaxis [fila, columna] que se utiliza en las matrices.\r\n\r\n\r\n# Fila 1\r\npoblaciones_paises[1, ]\r\n\r\n\r\n  pais poblacion\r\n1  PAN       4.1\r\n\r\n\r\n# Filas 1, 5 y 7\r\npoblaciones_paises[c(1, 5, 7), ]\r\n\r\n\r\n  pais poblacion\r\n1  PAN       4.1\r\n5  HND       9.2\r\n7  BLZ       0.3\r\n\r\n\r\n# Columna 2\r\npoblaciones_paises[, 2]\r\n\r\n\r\n[1]  4.1  5.0  6.2  6.4  9.2 16.9  0.3 10.6\r\n\r\n\r\n# Fila 1, columna 2\r\npoblaciones_paises[1, 2]\r\n\r\n\r\n[1] 4.1\r\n\r\n\r\n# Filas 1:4, columna 2\r\npoblaciones_paises[1:4, 2]\r\n\r\n\r\n[1] 4.1 5.0 6.2 6.4\r\n\r\nAdemás, mediante el operador $, es posible acceder a las columnas (i.e. variables) del data frame.\r\n\r\n\r\n# Columna de nombres de países\r\npoblaciones_paises$pais\r\n\r\n\r\n[1] \"PAN\" \"CRI\" \"NIC\" \"SLV\" \"HND\" \"GTM\" \"BLZ\" \"DOM\"\r\n\r\n\r\n# Modificación de los valores de toda una columna\r\npoblaciones_paises$poblacion = poblaciones_paises$poblacion*2\r\npoblaciones_paises\r\n\r\n\r\n  pais poblacion\r\n1  PAN       8.2\r\n2  CRI      10.0\r\n3  NIC      12.4\r\n4  SLV      12.8\r\n5  HND      18.4\r\n6  GTM      33.8\r\n7  BLZ       0.6\r\n8  DOM      21.2\r\n\r\nOperaciones\r\nR proporciona una gran variedad de funciones para manejar data frames. Las siguientes son algunas de las más utilizadas.\r\nLa función read.table() lee los datos contenidos en un archivo de texto y los retorna en un data frame. read.csv() es una función derivada, con valores por defecto orientados a los archivos de valores separados por comas (CSV, Comma Separated Values). Como argumento principal, read.csv() recibe la ruta del archivo CSV, el cual puede encontrarse en un disco local, en la Web o en otra ubicación.\r\n\r\n\r\n# Lectura de archivo CSV ubicado en la Web\r\ncovid <- \r\n  read.csv(\"https://raw.githubusercontent.com/tpb728O-programaciongeoespacialr/2021ii/main/datos/cepredenac/covid/04_22_21_CSV_GENERAL_CENTROAMERICA.csv\")\r\n\r\ncovid\r\n\r\n\r\n  pais fallecidos recuperados activos positivos\r\n1  PAN       6198      351949    3845    361992\r\n2  CRI       3125      199779   32370    235274\r\n3  GTM       7345      194075   16725    218145\r\n4  HND       4981       77020  121358    203359\r\n5  SLV       2089       64208    1864     68161\r\n6  BLZ        318       12164     114     12596\r\n7  NIC        181        5212      57      5450\r\n\r\n Ejercicio:\r\na. Descargue el archivo del ejemplo anterior (https://raw.githubusercontent.com/tpb728O-programaciongeoespacialr/2021ii/main/datos/cepredenac/covid/04_22_21_CSV_GENERAL_CENTROAMERICA.csv) en su computadora y cárguelo en otro data frame mediante read.csv(). \r\nLa función str() despliega la estructura de un objeto R.\r\n\r\n\r\n# Estructura del data frame\r\nstr(poblaciones_paises)\r\n\r\n\r\n'data.frame':   8 obs. of  2 variables:\r\n $ pais     : chr  \"PAN\" \"CRI\" \"NIC\" \"SLV\" ...\r\n $ poblacion: num  8.2 10 12.4 12.8 18.4 33.8 0.6 21.2\r\n\r\nLa función summary() proporciona un resumen de los contenidos de un data frame:\r\n\r\n\r\n# Resumen de los contenidos del data frame\r\nsummary(poblaciones_paises)\r\n\r\n\r\n     pais             poblacion    \r\n Length:8           Min.   : 0.60  \r\n Class :character   1st Qu.: 9.55  \r\n Mode  :character   Median :12.60  \r\n                    Mean   :14.68  \r\n                    3rd Qu.:19.10  \r\n                    Max.   :33.80  \r\n\r\nLa función View() invoca un visor de datos que permite visualizar un objeto R en un formato de tabla en una hoja de cálculo. Ejecute en su computadora la siguiente línea de código para apreciar el funcionamiento de View().\r\n\r\n\r\n# Vista de los casos de COVID-19\r\nView(covid, \"Casos de COVID-19 en Centramérica\")\r\n\r\n\r\n\r\nOtros\r\nFechas\r\nLas fecha se manejan en R mediante un tipo especial que permite realizar operaciones como diferencias, agrupamientos y otras. Internamente, las fechas en R se almacenan como un número que representa la cantidad de días transcurridos desde el 1 de enero de 1970 (1970-01-01).\r\nOperaciones\r\nLa función Sys.Date() retorna la fecha actual.\r\n\r\n\r\n# Fecha actual\r\nfecha_actual <- Sys.Date()\r\nfecha_actual\r\n\r\n\r\n[1] \"2021-08-11\"\r\n\r\n\r\n# Tipo de datos\r\ntypeof(fecha_actual)\r\n\r\n\r\n[1] \"double\"\r\n\r\n\r\n# Clase\r\nclass(fecha_actual)\r\n\r\n\r\n[1] \"Date\"\r\n\r\nLa función as.Date() convierte datos entre los tipos fecha y carácter, de acuerdo con un formato.\r\n\r\n\r\n# Conversión de fecha en formato año-mes-día\r\nfecha_caracter_01 <- \"2020-01-01\"\r\nfecha_01 <- as.Date(fecha_caracter_01, format=\"%Y-%m-%d\")\r\nfecha_01\r\n\r\n\r\n[1] \"2020-01-01\"\r\n\r\n\r\n# Conversión de fecha en formato día/mes/año\r\nfecha_caracter_02 <- \"31/01/2020\"\r\nfecha_02 <- as.Date(fecha_caracter_02, format=\"%d/%m/%Y\")\r\nfecha_02\r\n\r\n\r\n[1] \"2020-01-31\"\r\n\r\n\r\n# Diferencia entre fechas\r\nfecha_02 - fecha_01\r\n\r\n\r\nTime difference of 30 days\r\n\r\nHay una lista de formatos de fechas en Date Formats in R - R-bloggers.\r\n\r\n\r\n\r\n",
      "last_modified": "2021-08-11T21:23:37-06:00"
    },
    {
      "path": "leccion-02-r-conceptosbasicos.html",
      "title": "R - Conceptos básicos",
      "author": [],
      "contents": "\r\n\r\nContents\r\nResumen\r\nDefinición de funciones\r\nCondicionales\r\nLa sentencia if\r\nLa claúsula else\r\nLa cláusula else if\r\n\r\nCiclos\r\nSentencias básicas para manejo de ciclos\r\nLa sentencia for\r\nLa sentencia while\r\nLa sentencia repeat\r\nLas sentencias break y next\r\n\r\nLas funciones apply()\r\napply()\r\nlapply()\r\ntapply()\r\n\r\nVectorización\r\n\r\n\r\nResumen\r\nEn esta lección, se continúa el estudio de los conceptos básicos del lenguaje de programación R, incluyendo:\r\nDefinición de funciones.\r\nCondicionales.\r\nCiclos.\r\nDefinición de funciones\r\nAdemás de todas las funciones disponibles en la distribución base de R y en sus diferentes paquetes, R permite que los programadores definan sus propias funciones.\r\nToda función tiene tres partes esenciales:\r\nUn nombre.\r\nUn conjunto de argumentos.\r\nUn conjunto de líneas de código, también llamado el cuerpo de la función.\r\nPara programar una función, debe definirse cada una de esas partes por medio de la palabra función function().\r\n\r\n\r\nmi_funcion <- function(argumento_1, argumento_2, argumento_n) {\r\n  # Cuerpo de la función\r\n}\r\n\r\n\r\n\r\nPor ejemplo, la siguiente función calcula la nota final de un curso con base en los promedios de exámenes, proyectos y tareas.\r\n\r\n\r\nnota_final <- function(promedio_examenes,\r\n                       promedio_proyectos,\r\n                       promedio_tareas) {\r\n  factor_examenes <- promedio_examenes * 0.5\r\n  factor_proyectos <- promedio_proyectos * 0.4\r\n  factor_tareas <- promedio_tareas * 0.1\r\n  \r\n  return(factor_examenes + factor_proyectos + factor_tareas)\r\n}\r\n\r\n\r\n\r\nLa función return() es la que define el valor de retorno de la función. Si no se incluye, la función retorna la última expresión evaluada.\r\nAhora que está definida, la función nota_final() puede ser invocada, con diferentes argumentos:\r\n\r\n\r\n# Si ni se incluyen los nombres de los argumentos, la función asume que se ingresan en el mismo orden en el que fueron definidos\r\nnota_final(100, 50, 0)\r\n\r\n\r\n[1] 70\r\n\r\n\r\n# El uso de los nombres de argumentos permite modificar su orden\r\nnota_final(promedio_examenes =  100, promedio_tareas =  0, promedio_proyectos = 50)\r\n\r\n\r\n[1] 70\r\n\r\nSi se desea darle al usuario la opción de omitir algunos argumentos, se les puede asignar un valor por defecto.\r\nSeguidamente, la función nota_final() se redefine asignando valores por defecto a algunos de los argumentos:\r\n\r\n\r\nnota_final <- function(promedio_examenes,\r\n                       promedio_proyectos = 0,\r\n                       promedio_tareas = 0) {\r\n  factor_examenes <- promedio_examenes * 0.5\r\n  factor_proyectos <- promedio_proyectos * 0.4\r\n  factor_tareas <- promedio_tareas * 0.1\r\n  \r\n  # Al no llamarse a la función return(), se retorna la última expresión:\r\n  factor_examenes + factor_proyectos + factor_tareas\r\n}\r\n\r\n# Se utiliza el valor por defecto (0) para el argumento promedio_tareas\r\nnota_final(promedio_examenes = 100, promedio_proyectos = 50)\r\n\r\n\r\n[1] 70\r\n\r\n\r\n# Se llama la función usando la posición del primer argumento y el nombre del segundo\r\nnota_final(100, promedio_proyectos = 50)\r\n\r\n\r\n[1] 70\r\n\r\n Ejercicio:\r\na. Defina una función con nombre celsius_a_fahrenheit() que reciba como argumento una cantidad en grados Celsius y retorne el equivalente en grados Fahrenheit.\r\nb. Defina una función con nombre fahrenheit_a_celsius() que reciba como argumento una cantidad en grados Fahrenheit y retorne el equivalente en grados Celsius.\r\nc. Defina una función con nombre imc() para calcular el índice de masa corporal (IMC) de una persona con base en su peso (en kilogramos) y su estatura (en metros). \r\nCondicionales\r\nLas sentencias condicionales evalúan una expresión lógica (i.e. condición) y ejecutan, o no, un bloque de intrucciones dependiendo de si la expresión es verdadera (TRUE) o falsa (FALSE). Permiten que los programas “tomen decisiones” y varíen su curso de acción.\r\nLos condicionales en R se implementa mediante la sentencia if y sus cláusulas else y else if.\r\nLa sentencia if\r\nLa sentencia if evalúa una condición (i.e. una expresión lógica) y ejecuta un bloque de instrucciones, si es verdadera. El bloque se delimita con los caracteres de “llaves”: {}.\r\n\r\n\r\nif (condicion) {\r\n  # bloque de instrucciones a ejecutar si la condicion es verdadera\r\n}\r\n\r\n\r\n\r\nPor ejemplo:\r\n\r\n\r\nedad <- 25\r\n\r\nif (edad >= 18) {\r\n  print(\"Adulto\")\r\n}\r\n\r\n\r\n[1] \"Adulto\"\r\n\r\nYa sea que se ejecute o no el bloque del if, el programa continúa con las instrucciones que siguen al bloque, si las hay.\r\nLa claúsula else\r\nUna sentencia if puede ir seguida de una cláusula else, la cual define un bloque que se ejecuta si la condición es falsa. Por ejemplo:\r\n\r\n\r\nedad <- 15\r\n\r\nif (edad >= 18) {\r\n  print(\"Adulto\")\r\n} else {\r\n  print(\"Menor\")\r\n}\r\n\r\n\r\n[1] \"Menor\"\r\n\r\nLa cláusula else if\r\nUna sentencia if también puede ir seguida de una o varias cláusulas else if, las cuales evalúan condiciones adicionales.\r\n\r\n\r\nedad <- 70\r\n\r\nif (edad < 18) {\r\n  print(\"Menor\")\r\n} else if (edad < 65) {\r\n  print(\"Adulto\")\r\n} else {\r\n  print(\"Adulto mayor\")\r\n}\r\n\r\n\r\n[1] \"Adulto mayor\"\r\n\r\nLas cláusulas else if deben escribirse antes de la cláusula else, la cual es siempre la última, si es que está presente. Tanto las cláusulas else if como la cláusula else son opcionales.\r\n Ejercicio:\r\na. Defina una función con nombre interpretacion_imc() que reciba como argumento un número correspondiente al índice de masa corporal (IMC) de una persona. Debe retornar una hilera de caracteres correspondiente a la interpretación del IMC (“Bajo peso”, “Normal”, “Sobrepeso”, “Obesidad”), de acuerdo con la tabla disponible en Índice de mapas corporal - Wikipedia. \r\nCiclos\r\nLos ciclos permiten ejecutar tareas de manera repetitiva en un programa. Algunos ciclos se ejecutan una cantidad definida de veces, mientras que otros lo hacen mientras se cumple una condición lógica. Pueden usarse en combinación con cláusulas que terminan anticipadamente el ciclo o que omiten algunas de sus iteraciones.\r\nLos ciclos en R se implementan mediante las sentencias for, while y repeat, en combinación con las sentencias break y next.\r\nR provee varias funciones que implementan ciclos de manera implícita, tales como apply(), tapply() y lapply(). Adicionalmente, hay muchas operaciones (ej. las aritméticas) que están “vectorizadas”, por lo que no es necesario utilizarlas en ciclos. El uso de código vectorizado es muy recomendado en R, por ser muy eficiente.\r\nSentencias básicas para manejo de ciclos\r\nLa sentencia for\r\nLa sentencia for repite las instrucciones contenidas en un bloque para cada uno de los elementos de un vector o lista. En cada iteración, el valor del elemento que está siendo procesado se almacena en una variable.\r\n\r\n\r\nfor (variable in vector) {\r\n  # bloque de instrucciones\r\n}\r\n\r\n\r\n\r\nPor ejemplo, el siguiente fragmento de código utiliza un ciclo de tipo for para recorrer un vector de nombres e imprimir un saludo para cada uno.\r\n\r\n\r\nvector_nombres <- c(\"Andrés\", \"Beatriz\", \"Carlos\", \"Marta\", \"Pedro\", \"Sara\")\r\n\r\nfor (nombre in vector_nombres) {\r\n  cat(\"Hola\", nombre, \"\\n\")\r\n}\r\n\r\n\r\nHola Andrés \r\nHola Beatriz \r\nHola Carlos \r\nHola Marta \r\nHola Pedro \r\nHola Sara \r\n\r\nEn el siguiente ejemplo, se utiliza otro ciclo for para recorrer un vector de números y sumar sus elementos.\r\n\r\n\r\nvector_numeros <- c(29.6, -36.81, 31.85, 25.71, 90.2, 0.4)\r\n\r\nsuma <- 0\r\n\r\nfor (x in vector_numeros) {\r\n  suma <- suma + x\r\n}\r\n\r\ncat(\"Suma:\", suma)\r\n\r\n\r\nSuma: 140.95\r\n\r\n Ejercicio:\r\na. Utilice un ciclo for para recorrer el vector del ejemplo anterior y calcular el promedio de sus elementos. \r\nSeguidamente, se utiliza dos for “anidados” para sumar los elementos de cada una de las columnas de una matriz.\r\n\r\n\r\nm <- matrix(1:12, nrow=3, ncol=4)\r\nm\r\n\r\n\r\n     [,1] [,2] [,3] [,4]\r\n[1,]    1    4    7   10\r\n[2,]    2    5    8   11\r\n[3,]    3    6    9   12\r\n\r\n# Ciclo externo para recorrer las columnas de la matriz\r\nfor (j in 1:ncol(m)) {\r\n  suma_columna <- 0\r\n  # Ciclo interno para recorrer las elementos de cada columna\r\n  for (i in 1:nrow(m)) {\r\n    suma_columna <- suma_columna + m[i, j]\r\n  }\r\n  print(suma_columna)\r\n}\r\n\r\n\r\n[1] 6\r\n[1] 15\r\n[1] 24\r\n[1] 33\r\n\r\n Ejercicio:\r\na. Utilice dos ciclos for anidados para recorrer la matriz del ejemplo anterior y calcular el promedio de cada una de sus columnas. \r\nLa sentencia while\r\nLa sentencia while evalúa una condición (i.e. una expresión lógica) en cada iteración del ciclo y ejecuta las intrucciones del bloque mientras la condición sea verdadera. Generalmente, en algún momento la condición se vuelve falsa y así finaliza el ciclo.\r\n\r\n\r\nwhile (condicion) {\r\n  # bloque de instrucciones \r\n}\r\n\r\n\r\n\r\nEn el siguiente ejemplo, se utiliza un ciclo while para preguntarle al usuario cuál es la respuesta definitiva al sentido de la vida, el universo y todo lo demás y se continúa haciendo la pregunta hasta que responda correctamente:\r\n\r\n\r\n# Función para leer una respuesta desde la pantalla\r\nleer_respuesta <- function() {\r\n  readline(prompt=\"¿Cual es la respuesta definitiva al sentido de la vida, el universo y todo lo demás? \")\r\n}\r\n\r\n# Si la respuesta es incorrecta, se repite la pregunta hasta que el usuario conteste correctamente\r\nwhile (leer_respuesta() != \"42\") {   \r\n  print(\"¡Su respuesta es incorrecta!\")\r\n}\r\n\r\n\r\n\r\n Ejercicio:\r\na. Utilice un ciclo while para implementar el cálculo del promedio de los elementos de un vector. Sugerencia: utilice la función length() para obtener la longitud del vector y así saber cuando terminar de recorrerlo. \r\nLa sentencia repeat\r\nLa sentencia repeat implementa un ciclo que se repite indefinidamente. Puede interrumpirse con una sentencia break.\r\n\r\n\r\nrepeat {\r\n  # bloque de instrucciones \r\n}\r\n\r\n\r\n\r\nLos ciclos repeat tienen una estructura más sencilla que los while. Algo que los diferencia es que los bloques de los ciclos repeat entran a ejecutarse al menos una vez.\r\nEn el siguiente ejemplo, se utiliza un ciclo repeat para implementar la pregunta y lectura de la respuesta que anteriormente se implementó con un ciclo while.\r\n\r\n\r\n# Función para leer una respuesta desde la pantalla\r\nleer_respuesta <- function() {\r\n  readline(prompt=\"¿Cual es la respuesta definitiva al sentido de la vida, el universo y todo lo demás? \")\r\n}\r\n\r\n# Ciclo para imprimir la pregunta y leer la respuesta hasta que esta sea correcta\r\nrepeat {\r\n  respuesta <- leer_respuesta()\r\n  if (respuesta != \"42\") {\r\n    # Respuesta incorrecta\r\n    print(\"¡Su respuesta es incorrecta!\")\r\n  } else {\r\n    # Respuesta correcta. Se interrumpe el ciclo.\r\n    break\r\n  }\r\n}\r\n\r\n\r\n\r\nLas sentencias break y next\r\nLa sentencia break interrumpe un ciclo. La ejecución del programa continúa con la instrucción siguiente al bloque del ciclo.\r\nEn el siguiente ciclo for, se suman uno a uno los números de un vector, pero se usa un break para interrumpir el ciclo cuando el acumulado es mayor que 100.\r\n\r\n\r\nvector_numeros <- c(17, 23, 37, 41, 52, 64, 75)\r\n\r\nacumulado <- 0\r\n\r\nfor (x in vector_numeros) {\r\n  acumulado <- acumulado + x\r\n  cat(\"Acumulado:\", acumulado, \"\\n\")\r\n  if (acumulado >= 100) {\r\n    cat(\"Se superó el límite de 100 en el acumulado\")\r\n    break\r\n  }\r\n}\r\n\r\n\r\nAcumulado: 17 \r\nAcumulado: 40 \r\nAcumulado: 77 \r\nAcumulado: 118 \r\nSe superó el límite de 100 en el acumulado\r\n\r\nPor su parte, la sentencia next retorna el control al principio del bloque. Las instrucciones que hay después del next no se ejecutan. La siguiente iteración del ciclo (si la hay), se inicia entonces.\r\nEl siguiente ciclo recorre un vector de números. Se utiliza la sentencia next para “saltar” los números impares y sumar solo los pares.\r\n\r\n\r\nvector_numeros <- c(17, 23, 37, 41, 52, 64, 75)\r\n\r\nsuma_pares <- 0\r\n\r\nfor (x in vector_numeros) {\r\n  if (x %% 2 == 0) {\r\n    # Número par: se suma\r\n    suma_pares <- suma_pares + x\r\n  } else {\r\n    # Número impar: se \"salta\" al siguiente número\r\n    next\r\n  }\r\n}\r\n\r\ncat(\"Suma de los números pares:\", suma_pares)\r\n\r\n\r\nSuma de los números pares: 116\r\n\r\nLas funciones apply()\r\nEsta es una familia de funciones que manipulan subconjuntos de datos obtenidos a partir de matrices, listas y data frames, los cuales son recorridos de una forma repetitiva. Pueden funcionar como una alternativa a los ciclos y aplicar funciones en los subconjuntos de datos como, por ejemplo, funciones estadísticas en las columnas de una matriz o de un data frame. Su uso es muy recomendado por su eficiencia, flexibilidad y simplicidad.\r\nEntre estas funciones, pueden mencionarse apply(), lapply(), sapply(), vapply(), mapply(), rapply() y tapply().\r\napply()\r\nLa función apply() toma como entrada un arreglo o una matriz y aplica alguna función sobre sus filas o columnas.\r\nLa sintaxis de la función es:\r\n\r\n\r\napply(X, MARGIN, FUN, ...)\r\n\r\n\r\n\r\nEn donde:\r\n- X: es un arreglo o matriz.\r\n- MARGIN: MARGIN = 1 significa que la función actúa en las filas, MARGIN = 2 significa que la función actúa en las columnas y MARGIN = c(1, 2) significa que la función actúa en las filas y en las columnas.\r\n- FUN: es la función que se aplicará a cada uno de los elementos de X.\r\nEn el siguiente ejemplo, se utiliza la función apply() para sumar los elementos de las columnas de una matriz.\r\n\r\n\r\nm <- matrix(1:12, nrow=3, ncol=4)\r\nm\r\n\r\n\r\n     [,1] [,2] [,3] [,4]\r\n[1,]    1    4    7   10\r\n[2,]    2    5    8   11\r\n[3,]    3    6    9   12\r\n\r\n# Suma de las columnas\r\napply(m, 2, sum)\r\n\r\n\r\n[1]  6 15 24 33\r\n\r\n Ejercicio:\r\na. Utilice la función apply() para obtener el promedio de los elementos de cada columna de la matriz del ejemplo anterior. \r\nlapply()\r\nLa función lapply() toma como entrada un vector o lista y retorna una lista de la misma longitud en la que cada uno de sus elementos es el resultado de aplicar una función al vector o lista de entrada.\r\nLa sintaxis de la función es:\r\n\r\n\r\nlapply(X, FUN, ...)\r\n\r\n\r\n\r\nEn donde:\r\n- X: es un vector o lista.\r\n- FUN: es la función que se aplicará a cada elemento de X. Algunas funciones predefinidas que pueden utilizarse incluyen mean(), median(), sum(), min() y max(). También pueden usarse funciones definidas por el usuario.\r\nEn los siguientes ejemplos, se utiliza lapply() para aplicar diferentes funciones a un vector de nombres de personas.\r\n\r\n\r\nnombres <- c(\"Andrés\", \"Beatriz\", \"Carlos\", \"Marta\", \"Pedro\", \"Sara\")\r\n\r\n# Los nombres de la lista se transforman a minúscula\r\nnombres_en_minuscula <- lapply(nombres, tolower)\r\nnombres_en_minuscula\r\n\r\n\r\n[[1]]\r\n[1] \"andrés\"\r\n\r\n[[2]]\r\n[1] \"beatriz\"\r\n\r\n[[3]]\r\n[1] \"carlos\"\r\n\r\n[[4]]\r\n[1] \"marta\"\r\n\r\n[[5]]\r\n[1] \"pedro\"\r\n\r\n[[6]]\r\n[1] \"sara\"\r\n\r\n# Se genera un saludo para cada nombre\r\nnombres_con_saludo <- lapply(nombres, function(arg1, arg2) paste(arg1, arg2), arg1=\"Hola\")\r\nnombres_con_saludo\r\n\r\n\r\n[[1]]\r\n[1] \"Hola Andrés\"\r\n\r\n[[2]]\r\n[1] \"Hola Beatriz\"\r\n\r\n[[3]]\r\n[1] \"Hola Carlos\"\r\n\r\n[[4]]\r\n[1] \"Hola Marta\"\r\n\r\n[[5]]\r\n[1] \"Hola Pedro\"\r\n\r\n[[6]]\r\n[1] \"Hola Sara\"\r\n\r\ntapply()\r\nLa función tapply() aplica una función a cada nivel de un factor.\r\nLa sintaxis de la función es:\r\n\r\n\r\ntapply(X, INDEX, FUN)\r\n\r\n\r\n\r\nEn donde:\r\n- X: es un objeto, tipicamente un vector.\r\n- INDEX: es una lista que contiene un factor.\r\n- FUN: es la función que se aplicará a cada elemento de X.\r\nEn el siguiente ejemplo, se utiliza tapply() para calcular la mediana del ancho del sépalo para cada especie del conjunto de datos iris.\r\n\r\n\r\ndata(iris)\r\ntapply(iris$Sepal.Width, iris$Species, median)\r\n\r\n\r\n    setosa versicolor  virginica \r\n       3.4        2.8        3.0 \r\n\r\n Ejercicio:\r\na. Utilice la función tapply() para obtener el promedio de las longitudes de los pétalos para cada especie del conjunto de datos iris. \r\nVectorización\r\nEn R, muchas operaciones y funciones pueden ser vectorizadas, lo que significa que pueden aplicarse a los elementos de un vector sin necesidad de iterar uno por uno en estos.\r\nPor ejemplo, considérese el siguiente fragmento de código no vectorizado, que utiliza un ciclo para convertir los números de un vector a sus valores absolutos:\r\n\r\n\r\nvector_numeros <- c(23, -17, 34, 0, -12, 55)\r\n\r\nfor (i in 1:length(vector_numeros)) {\r\n  if (vector_numeros[i] < 0) {\r\n    vector_numeros[i] <- -vector_numeros[i]\r\n  }\r\n}\r\n\r\nvector_numeros\r\n\r\n\r\n[1] 23 17 34  0 12 55\r\n\r\nEl siguiente fragmento de código realiza la misma tarea, pero de forma vectorizada:\r\n\r\n\r\nvector_numeros <- c(23, -17, 34, 0, -12, 55)\r\n\r\n# Se usa una expresión lógica para seleccionar los elementos del vector < 0\r\nnegativos <- vector_numeros < 0\r\nnegativos\r\n\r\n\r\n[1] FALSE  TRUE FALSE FALSE  TRUE FALSE\r\n\r\n# Se cambian los elementos seleccionados en el paso anterior sin utilizar el for\r\nvector_numeros[negativos] <- vector_numeros[negativos] * -1\r\n\r\nvector_numeros\r\n\r\n\r\n[1] 23 17 34  0 12 55\r\n\r\n Ejercicio:\r\na. Utilice código vectorizado para implementar una función que reciba como argumento un vector de números y retorne el mismo vector con los elementos impares (solo los impares) elevados al cuadrado. \r\n\r\n\r\n\r\n",
      "last_modified": "2021-08-17T23:44:16-06:00"
    },
    {
      "path": "leccion-03-rmarkdown.html",
      "title": "R Markdown",
      "author": [],
      "contents": "\r\n\r\nContents\r\nResumen\r\nTrabajo previo\r\nDescripción general\r\nMarkdown\r\nVariaciones\r\nSintaxis\r\nEncabezados\r\nItálicas\r\nNegritas\r\nCitas textuales\r\nEnlaces a otros documentos\r\nImágenes\r\nListas numeradas\r\nListas no numeradas\r\nOtros elementos de sintaxis\r\n\r\n\r\n\r\nResumen\r\nEn esta lección, se introduce el lenguaje de marcas R Markdown.\r\nTrabajo previo\r\nLea los capítulos del 1 al 3 de Xie, Y., Allaire, J., & Grolemund, G. (2018). R Markdown: The Definitive Guide.\r\nTambién se recomienda:\r\nR Markdown (sitio oficial).\r\nYihui Xie | One R Markdown Document, Fourteen Demos | RStudio (2020).\r\nReproducible reports with R Markdown.\r\nReproducible Templates for Analysis and Dissemination.\r\nIntroduction to Blogdown (R Package) | RStudio Webinar - 2017.\r\nSteps to create website with blogdown and the Hugo Academic (Wowchemy) theme.\r\nHow To Hugo Academic.\r\n\r\nDescripción general\r\nR Markdown es un formato de archivo para construir documentos dinámicos con el lenguaje de programación R y el lenguaje de marcado Markdown.\r\nMarkdown\r\nMarkdown es un lenguaje de marcas creado en 2004 por John Gruber. Las “marcas” se utilizan para brindar información acerca de la presentación (ej. negritas, itálicas) o la estructura (ej. títulos, encabezados) de un documento. Se caracteriza por ser más sencillo de leer y de usar que otros lenguajes de marcas (ej. HTML). Los documentos escritos en Markdown pueden exportarse a una gran variedad de formatos (ej. HTML, Doc, PDF, Latex) para ser usados en libros, presentaciones o páginas web, entre otros. Markdown es ampliamente utilizado en comunicación científica, documentación de programas e investigación reproducible.\r\nVariaciones\r\nLas variaciones de Markdown, también llamadas flavors, son extensiones o modificaciones de la especificación original. Entre las más populares están:\r\nR Markdown: para el lenguaje R.\r\nMyST (Markedly Structured Text) Markdown: para Jupyter Book.\r\nGitHub Flavored Markdown: para la plataforma GitHub.\r\nPuede consultarse una lista más extensa en https://github.com/commonmark/commonmark-spec/wiki/markdown-flavors.\r\nSintaxis\r\nLa sintaxis de Markdown permite especificar diferentes componentes de un documento, entre los que están:\r\nEncabezados.\r\nEstilos (ej. negritas, itálicas).\r\nCitas textuales.\r\nEnlaces a otros documentos (ej. páginas web).\r\nImágenes.\r\nListas.\r\nEncabezados\r\nPueden definirse seis niveles de encabezados, con los símbolos de numeral (#) antes del texto. El primer nivel es el más grande y el sexto el más pequeño. A la izquierda se muestra la sintaxis Markdown y a la derecha la forma en que se despliega en un documento.\r\n\r\nItálicas\r\nSe definen con un asterisco (*) antes y después del texto o con un guión bajo (_) antes y después del texto.\r\n\r\nNegritas\r\nSe definen con dos asteriscos (**) antes y después del texto o con dos guiones bajos (__) antes y después del texto.\r\n\r\nCitas textuales\r\nSe definen con un símbolo de “mayor que” (>) antes de cada línea.\r\n\r\nEnlaces a otros documentos\r\nSe definen con un paréntesis cuadrados[] seguidos de paréntesis redondos (). En los paréntesis cuadrados se coloca (opcionalmente) el texto del enlace y en los redondos la dirección del documento.\r\n\r\nImágenes\r\nSe definen con un signo de admiración de cierre (!), paréntesis cuadrados[] y paréntesis redondos (). En los paréntesis cuadrados se coloca (opcionalmente) un texto para la imagen y en los redondos la dirección de la imagen, ya sea en el disco o en la red.\r\n\r\nListas numeradas\r\nSe definen con números antes de cada elemento.\r\n\r\nListas no numeradas\r\nSe definen con guiones antes de cada elemento.\r\n\r\nOtros elementos de sintaxis\r\nPara conocer otros elementos de la sintaxis de Markdown, se recomienda revisar en detalle:\r\nGuía de referencia de Markdown: Markdown Guide\r\nTutorial sobre Markdown: Markdown Tutorial\r\n\r\n\r\n\r\n",
      "last_modified": "2021-08-29T16:40:19-06:00"
    },
    {
      "path": "leccion-04-blogdown.html",
      "title": "blogdown",
      "author": [],
      "contents": "\r\n\r\nContents\r\nResumen\r\nTrabajo previo\r\nDescripción general\r\n\r\nResumen\r\nEn esta lección, se introduce el paquete blogdown para la creación de sitios web mediante R Markdown.\r\nTrabajo previo\r\nLea los capítulos del 1 al 5 de Xie, Y., Thomas, A., & Hill, A. (2017). blogdown: Creating Websites with R Markdown.\r\nTambién se recomienda:\r\nCreate Blogs and Websites with R Markdown - blogdown.\r\nIntroduction to Blogdown (R Package) | RStudio Webinar - 2017.\r\nSteps to create website with blogdown and the Hugo Academic (Wowchemy) theme.\r\nHow To Hugo Academic.\r\nUp & running with blogdown in 2021 - Alison Hill.\r\nMultilingual Mode - Hugo.\r\n\r\nDescripción general\r\nblogdown es un paquete de R para la creación de sitios web mediante R Markdown. Se apoya en Hugo, un generador de sitios web estáticos.\r\n\r\n\r\n\r\n",
      "last_modified": "2021-09-01T11:51:15-06:00"
    },
    {
      "path": "leccion-05-r-graficacion.html",
      "title": "R - Graficación",
      "author": [],
      "contents": "\r\n\r\nContents\r\nIntroducción\r\nConjuntos de datos utilizados\r\nPaquetes de R para graficación\r\nInstalación, carga y ayuda\r\n\r\nAlgunos tipos de gráficos\r\nGráficos de dispersión\r\ngraphics\r\nggplot2\r\n\r\nGráficos de líneas\r\ngraphics\r\nggplot2\r\nplotly\r\n\r\nGráficos de barras\r\ngraphics\r\nggplot2\r\n\r\n\r\n\r\n\r\nIntroducción\r\nConjuntos de datos utilizados\r\nEn los siguientes ejemplos y ejercicios, se utilizarán dos conjuntos de datos, los cuales se cargan en data frames con la función read.csv() y se visualizan con la función View().\r\nCasos de covid en Costa Rica\r\nEste conjunto de datos es publicado por el Ministerio de Salud de Costa Rica. Contiene un registro por día con las estadísticas de casos positivos, fallecidos, activos y recuperados.\r\n\r\n\r\n# Carga de datos desde un archivo CSV\r\ncr_covid19 <- \r\n  read.csv(\r\n    file='https://raw.githubusercontent.com/tpb728O-programaciongeoespacialr/2021ii/main/datos/minsalud/covid/ultimafecha_CSV_GENERAL.csv', \r\n    sep = \",\"\r\n  )\r\n\r\n\r\n\r\n\r\n\r\n# Despliegue de los datos\r\nView(cr_covid19)\r\n\r\n\r\n\r\nCasos de covid en Centroamérica\r\nEste conjunto de datos publicados por el Centro de Coordinación para la Prevención de los Desastres en Centroamérica y República Dominicana (Cepredenac) tiene un registro por país con los casos (positivos, fallecidos, activos, recuperados) acumulados hasta la fecha en cada uno.\r\n\r\n\r\n# Carga de datos desde un archivo CSV\r\nca_covid19 <- \r\n  read.csv(\r\n    file='https://raw.githubusercontent.com/gf0604-procesamientodatosgeograficos/2021i-datos/main/cepredenac/covid/ultimafecha_CSV_GENERAL_CENTROAMERICA.csv'\r\n  )\r\n\r\n\r\n\r\n\r\n\r\n# Despliegue de los datos\r\nView(ca_covid19)\r\n\r\n\r\n\r\nRegistros de presencia de mamíferos de Costa Rica\r\nEn los siguientes ejemplos y ejercicios, se utilizará un conjunto de registros de presencia de mamíferos de Costa Rica, obtenido a través de una consulta al portal de datos de la Infraestructura Mundial de Información en Biodiversidad (GBIF).\r\n\r\n\r\n# Carga de datos desde un archivo CSV (separado por tabuladores)\r\nregistros_mammalia_cr <- \r\n  read.csv(\r\n    file='https://raw.githubusercontent.com/tpb728O-programaciongeoespacialr/2021ii/main/datos/gbif/mammalia-cr-registros.csv', \r\n    sep = \"\\t\"\r\n  )\r\n\r\n\r\n\r\n\r\n\r\n# Despliegue de los datos\r\nView(registros_mammalia_cr)\r\n\r\n\r\n\r\nPaquetes de R para graficación\r\nR provee varios paquetes para generar gráficos. Aquí se estudiarán tres:\r\ngraphics: es un paquete para gráficos relativamente sencillos y forma parte de la instalación base de R.\r\nggplot2: es parte de Tidyverse, una colección de paquetes de R diseñada para utilizarse en ciencia de datos. Este paquete está basado en el libro The Grammar of Graphics, de Leland Wilkinson et al..\r\nplotly: biblioteca de graficación disponible para JavaScript, Python, R y Julia.\r\nInstalación, carga y ayuda\r\nEn R, los paquetes pueden instarlarse con la función install.packages():\r\n\r\n\r\n# Instalación de ggplot2\r\ninstall.packages(\"ggplot2\")\r\n\r\n# Instalación de plotly\r\ninstall.packages(\"plotly\")\r\n\r\n# Instalación de dplyr\r\n# (paquete para manipulación de datos de Tidyverse)\r\ninstall.packages(\"dplyr\")\r\n\r\n# Opcionalmente, pueden instalarse todos los paquetes de Tidyverse\r\n# Esta instalación toma más tiempo por tratarse de varios paquetes\r\ninstall.packages(\"tidyverse\")\r\n\r\n\r\n\r\nDespués de la instalación, los paquetes deben cargarse con la función library():\r\n\r\n\r\n# Carga de graphics\r\nlibrary(graphics)\r\n\r\n# Carga de ggplot2\r\nlibrary(ggplot2)\r\n\r\n# Carga de plotly\r\nlibrary(plotly)\r\n\r\n# Carga de dplyr\r\nlibrary(dplyr)\r\n\r\n# Opcionalmente, puede cargarse toda la colección tidyverse\r\nlibrary(tidyverse)\r\n\r\n\r\n\r\nPara obtener información sobre un paquete, puede utilizarse el parámetro help de library():\r\n\r\n\r\n# Ayuda en línea sobre ggplot2\r\nlibrary(help=\"ggplot2\")\r\n\r\n\r\n\r\nAlgunos tipos de gráficos\r\nGráficos de dispersión\r\nUn diagrama o gráfico de dispersión (scatter plot) muestra la relación entre dos variables numéricas. Para cada punto de datos, el valor de la primera variable se representa en el eje X y el de la segunda variable en el eje Y.\r\ngraphics\r\nLa función plot() del paquete graphics recibe como argumentos los vectores de las variables que se desean graficar. El siguiente ejemplo usa las variables de casos positivos y casos activos de covid en Costa Rica.\r\n\r\n\r\n# Gráfico\r\nplot(cr_covid19$positivos, cr_covid19$activos)\r\n\r\n\r\n\r\n\r\nPara mejorar el gráfico, pueden utilizarse otras opciones de la función plot():\r\n\r\n\r\n# Gráfico con parámetros adicionales de plot()\r\noptions(scipen=999) # para eliminar la notación científica en los ejes\r\nplot(\r\n  cr_covid19$positivos, \r\n  cr_covid19$activos,\r\n  main='Relación entre casos positivos y activos de covid en CR',\r\n  xlab='Casos positivos',\r\n  ylab='Casos activos'\r\n)\r\n\r\n\r\n\r\n\r\nPara incluir la incluir la columna con la fecha, esta debe convertirse primero a la clase Date:\r\n\r\n\r\n# Conversión de la columna de fecha a la clase Date\r\ncr_covid19$FECHA <- as.Date(cr_covid19$FECHA, \"%d/%m/%Y\")\r\n\r\n# Gráfico con fechas\r\nplot(\r\n  cr_covid19$FECHA, \r\n  cr_covid19$positivos,\r\n  main='Evolución en el tiempo de los casos positivos de covid en CR',\r\n  xlab='Fecha',\r\n  ylab='Casos positivos'\r\n)\r\naxis(1, cr_covid19$FECHA, format(cr_covid19$FECHA, \"%d %b\"), tick = FALSE)\r\n\r\n\r\n\r\n\r\nggplot2\r\nCon la función ggplot(), del paquete ggplot2, puede obtenerse un resultado similar:\r\n\r\n\r\n# Gráfico con fechas\r\nggplot(cr_covid19, aes(x = FECHA, y = positivos)) +\r\n  ggtitle('Evolución en el tiempo de los casos positivos de covid en CR') +\r\n  xlab('Fecha') +\r\n  ylab('Casos positivos') +\r\n  geom_point()\r\n\r\n\r\n\r\n\r\nLa manera usual de usar ggplot() es con un data frame como argumento, especificando cuales columnas usar como valores de x e y. La primera parte, ggplot(), crea la base del gráfico (i.e. el canvas), mientras que geom_point() agrega una capa adicional, lo mismo que ggtitle() y las funciones restantes.\r\n Ejercicio:\r\na. Modifique el gráfico anterior para mostrar los casos fallecidos en el eje y.\r\nGráficos de líneas\r\nUn gráfico de líneas (line graph o line chart) muestra la evolución de una o varias variables numéricas. Los puntos de datos se conectan mediante segmentos de líneas rectas. Los gráficos de líneas son usados frecuentemente para visualizar tendencias de los datos en intervalos de tiempo (i.e. en series temporales).\r\ngraphics\r\nPuede hacerse un gráfico de líneas con la función plot() al pasarle como argumento type=\"l\".\r\n\r\n\r\n# Gráfico de líneas\r\nplot(\r\n  cr_covid19$FECHA, \r\n  cr_covid19$positivos,\r\n  main='Evolución en el tiempo de los casos positivos de covid en CR',\r\n  xlab='Fecha',\r\n  ylab='Casos positivos',\r\n  type=\"l\"\r\n)\r\naxis(1, cr_covid19$FECHA, format(cr_covid19$FECHA, \"%d %b\"), tick = FALSE)\r\n\r\n\r\n\r\n\r\nSi se desea agregar más líneas, o series de puntos, debe entonces llamarse a plot() para la primera variable (ej. la primera línea) y luego agregar las restantes series de líneas o de puntos con las funciones lines() y points().\r\n\r\n\r\n# Gráfico de línea de casos positivos\r\nplot(\r\n  cr_covid19$FECHA, \r\n  cr_covid19$positivos,\r\n  main='Evolución en el tiempo de los casos de covid en CR',\r\n  xlab='Fecha',\r\n  ylab='Casos',\r\n  type=\"l\",\r\n  col=\"blue\"\r\n)\r\naxis(1, cr_covid19$FECHA, format(cr_covid19$FECHA, \"%d %b\"), tick = FALSE)\r\n\r\n# Casos activos\r\nlines(cr_covid19$FECHA, cr_covid19$activos, col=\"red\")\r\n\r\n# Casos recuperados\r\nlines(cr_covid19$FECHA, cr_covid19$RECUPERADOS, col=\"green\")\r\n\r\n# Casos fallecidos\r\nlines(cr_covid19$FECHA, cr_covid19$fallecidos, col=\"violet\")\r\n\r\n\r\n\r\n\r\nggplot2\r\nCon las funciones de ggplot2 puede conseguirse un resultado similar al crear el gráfico base con ggplot() y agregar las series de líneas y puntos con geom_line() y geom_point().\r\n\r\n\r\n# Gráfico de líneas de casos de covid en Costa Rica\r\nggplot(cr_covid19, aes(x=FECHA)) + \r\n  ggtitle(\"Evolución en el tiempo de los casos de covid en CR\") +\r\n  xlab(\"Fecha\") + \r\n  ylab(\"Casos\") +\r\n  geom_line(aes(y = positivos), color = \"blue\") +\r\n  geom_point(aes(y = positivos), color = \"blue\") + \r\n  geom_line(aes(y = activos), color = \"red\") +\r\n  geom_point(aes(y = activos), color = \"red\") +   \r\n  geom_line(aes(y = RECUPERADOS), color=\"green\") +\r\n  geom_point(aes(y = RECUPERADOS), color = \"green\") +\r\n  geom_line(aes(y = fallecidos), color=\"violet\") +\r\n  geom_point(aes(y = fallecidos), color = \"violet\")  \r\n\r\n\r\n\r\n\r\n Ejercicio:\r\na. Modifique el gráfico anterior y aumente el tamaño de los puntos.\r\nplotly\r\nVersión del gráfico en plotly:\r\n\r\n\r\n# Gráfico de líneas de casos de covid en Costa Rica\r\nplot_ly(data = cr_covid19,\r\n                x = ~ FECHA,\r\n                y = ~ positivos, \r\n                name = 'Positivos', \r\n                type = 'scatter',\r\n                mode = 'lines',\r\n                line = list(color = \"blue\")) %>%\r\n  add_trace(y = ~ activos,\r\n                    name = 'Activos',\r\n                    mode = 'lines',\r\n                    line = list(color = \"red\")) %>%\r\n  add_trace(y = ~ RECUPERADOS,\r\n                    name = 'Recuperados',\r\n                    mode = 'lines',\r\n                    line = list(color = \"green\")) %>%\r\n  add_trace(y = ~ fallecidos,\r\n                    name = 'Fallecidos',\r\n                    mode = 'lines',\r\n                    line = list(color = \"violet\")) %>%  \r\n  layout(title = \"\",\r\n                 yaxis = list(title = \"Cantidad de casos\"),\r\n                 xaxis = list(title = \"Fecha\"),\r\n                 legend = list(x = 0.1, y = 0.9),\r\n                 hovermode = \"compare\")\r\n\r\n\r\n\r\n{\"x\":{\"visdat\":{\"3b03de632c6\":[\"function () \",\"plotlyVisDat\"]},\"cur_data\":\"3b03de632c6\",\"attrs\":{\"3b03de632c6\":{\"x\":{},\"y\":{},\"mode\":\"lines\",\"line\":{\"color\":\"blue\"},\"name\":\"Positivos\",\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"type\":\"scatter\"},\"3b03de632c6.1\":{\"x\":{},\"y\":{},\"mode\":\"lines\",\"line\":{\"color\":\"red\"},\"name\":\"Activos\",\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"type\":\"scatter\",\"inherit\":true},\"3b03de632c6.2\":{\"x\":{},\"y\":{},\"mode\":\"lines\",\"line\":{\"color\":\"green\"},\"name\":\"Recuperados\",\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"type\":\"scatter\",\"inherit\":true},\"3b03de632c6.3\":{\"x\":{},\"y\":{},\"mode\":\"lines\",\"line\":{\"color\":\"violet\"},\"name\":\"Fallecidos\",\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"type\":\"scatter\",\"inherit\":true}},\"layout\":{\"margin\":{\"b\":40,\"l\":60,\"t\":25,\"r\":10},\"title\":\"\",\"yaxis\":{\"domain\":[0,1],\"automargin\":true,\"title\":\"Cantidad de casos\"},\"xaxis\":{\"domain\":[0,1],\"automargin\":true,\"title\":\"Fecha\"},\"legend\":{\"x\":0.1,\"y\":0.9},\"hovermode\":\"compare\",\"showlegend\":true},\"source\":\"A\",\"config\":{\"showSendToCloud\":false},\"data\":[{\"x\":[\"2020-03-06\",\"2020-03-07\",\"2020-03-08\",\"2020-03-09\",\"2020-03-10\",\"2020-03-11\",\"2020-03-12\",\"2020-03-13\",\"2020-03-14\",\"2020-03-15\",\"2020-03-16\",\"2020-03-17\",\"2020-03-18\",\"2020-03-19\",\"2020-03-20\",\"2020-03-21\",\"2020-03-22\",\"2020-03-23\",\"2020-03-24\",\"2020-03-25\",\"2020-03-26\",\"2020-03-27\",\"2020-03-28\",\"2020-03-29\",\"2020-03-30\",\"2020-03-31\",\"2020-04-01\",\"2020-04-02\",\"2020-04-03\",\"2020-04-04\",\"2020-04-05\",\"2020-04-06\",\"2020-04-07\",\"2020-04-08\",\"2020-04-09\",\"2020-04-10\",\"2020-04-11\",\"2020-04-12\",\"2020-04-13\",\"2020-04-14\",\"2020-04-15\",\"2020-04-16\",\"2020-04-17\",\"2020-04-18\",\"2020-04-19\",\"2020-04-20\",\"2020-04-21\",\"2020-04-22\",\"2020-04-23\",\"2020-04-24\",\"2020-04-25\",\"2020-04-26\",\"2020-04-27\",\"2020-04-28\",\"2020-04-29\",\"2020-04-30\",\"2020-05-01\",\"2020-05-02\",\"2020-05-03\",\"2020-05-04\",\"2020-05-05\",\"2020-05-06\",\"2020-05-07\",\"2020-05-08\",\"2020-05-09\",\"2020-05-10\",\"2020-05-11\",\"2020-05-12\",\"2020-05-13\",\"2020-05-14\",\"2020-05-15\",\"2020-05-16\",\"2020-05-17\",\"2020-05-18\",\"2020-05-19\",\"2020-05-20\",\"2020-05-21\",\"2020-05-22\",\"2020-05-23\",\"2020-05-24\",\"2020-05-25\",\"2020-05-26\",\"2020-05-27\",\"2020-05-28\",\"2020-05-29\",\"2020-05-30\",\"2020-05-31\",\"2020-06-01\",\"2020-06-02\",\"2020-06-03\",\"2020-06-04\",\"2020-06-05\",\"2020-06-06\",\"2020-06-07\",\"2020-06-08\",\"2020-06-09\",\"2020-06-10\",\"2020-06-11\",\"2020-06-12\",\"2020-06-13\",\"2020-06-14\",\"2020-06-15\",\"2020-06-16\",\"2020-06-17\",\"2020-06-18\",\"2020-06-19\",\"2020-06-20\",\"2020-06-21\",\"2020-06-22\",\"2020-06-23\",\"2020-06-24\",\"2020-06-25\",\"2020-06-26\",\"2020-06-27\",\"2020-06-28\",\"2020-06-29\",\"2020-06-30\",\"2020-07-01\",\"2020-07-02\",\"2020-07-03\",\"2020-07-04\",\"2020-07-05\",\"2020-07-06\",\"2020-07-07\",\"2020-07-08\",\"2020-07-09\",\"2020-07-10\",\"2020-07-11\",\"2020-07-12\",\"2020-07-13\",\"2020-07-14\",\"2020-07-15\",\"2020-07-16\",\"2020-07-17\",\"2020-07-18\",\"2020-07-19\",\"2020-07-20\",\"2020-07-21\",\"2020-07-22\",\"2020-07-23\",\"2020-07-24\",\"2020-07-25\",\"2020-07-26\",\"2020-07-27\",\"2020-07-28\",\"2020-07-29\",\"2020-07-30\",\"2020-07-31\",\"2020-08-01\",\"2020-08-02\",\"2020-08-03\",\"2020-08-04\",\"2020-08-05\",\"2020-08-06\",\"2020-08-07\",\"2020-08-08\",\"2020-08-09\",\"2020-08-10\",\"2020-08-11\",\"2020-08-12\",\"2020-08-13\",\"2020-08-14\",\"2020-08-15\",\"2020-08-16\",\"2020-08-17\",\"2020-08-18\",\"2020-08-19\",\"2020-08-20\",\"2020-08-21\",\"2020-08-22\",\"2020-08-23\",\"2020-08-24\",\"2020-08-25\",\"2020-08-26\",\"2020-08-27\",\"2020-08-28\",\"2020-08-29\",\"2020-08-30\",\"2020-08-31\",\"2020-09-01\",\"2020-09-02\",\"2020-09-03\",\"2020-09-04\",\"2020-09-05\",\"2020-09-06\",\"2020-09-07\",\"2020-09-08\",\"2020-09-09\",\"2020-09-10\",\"2020-09-11\",\"2020-09-12\",\"2020-09-13\",\"2020-09-14\",\"2020-09-15\",\"2020-09-16\",\"2020-09-17\",\"2020-09-18\",\"2020-09-19\",\"2020-09-20\",\"2020-09-21\",\"2020-09-22\",\"2020-09-23\",\"2020-09-24\",\"2020-09-25\",\"2020-09-26\",\"2020-09-27\",\"2020-09-28\",\"2020-09-29\",\"2020-09-30\",\"2020-10-01\",\"2020-10-02\",\"2020-10-03\",\"2020-10-04\",\"2020-10-05\",\"2020-10-06\",\"2020-10-07\",\"2020-10-08\",\"2020-10-09\",\"2020-10-10\",\"2020-10-11\",\"2020-10-12\",\"2020-10-13\",\"2020-10-14\",\"2020-10-15\",\"2020-10-16\",\"2020-10-17\",\"2020-10-18\",\"2020-10-19\",\"2020-10-20\",\"2020-10-21\",\"2020-10-22\",\"2020-10-23\",\"2020-10-24\",\"2020-10-25\",\"2020-10-26\",\"2020-10-27\",\"2020-10-28\",\"2020-10-29\",\"2020-10-30\",\"2020-10-31\",\"2020-11-01\",\"2020-11-02\",\"2020-11-03\",\"2020-11-04\",\"2020-11-05\",\"2020-11-06\",\"2020-11-07\",\"2020-11-08\",\"2020-11-09\",\"2020-11-10\",\"2020-11-11\",\"2020-11-12\",\"2020-11-13\",\"2020-11-14\",\"2020-11-15\",\"2020-11-16\",\"2020-11-17\",\"2020-11-18\",\"2020-11-19\",\"2020-11-20\",\"2020-11-21\",\"2020-11-22\",\"2020-11-23\",\"2020-11-24\",\"2020-11-25\",\"2020-11-26\",\"2020-11-27\",\"2020-11-28\",\"2020-11-29\",\"2020-11-30\",\"2020-12-01\",\"2020-12-02\",\"2020-12-03\",\"2020-12-04\",\"2020-12-05\",\"2020-12-06\",\"2020-12-07\",\"2020-12-08\",\"2020-12-09\",\"2020-12-10\",\"2020-12-11\",\"2020-12-12\",\"2020-12-13\",\"2020-12-14\",\"2020-12-15\",\"2020-12-16\",\"2020-12-17\",\"2020-12-18\",\"2020-12-19\",\"2020-12-20\",\"2020-12-21\",\"2020-12-22\",\"2020-12-23\",\"2020-12-24\",\"2020-12-25\",\"2020-12-26\",\"2020-12-27\",\"2020-12-28\",\"2020-12-29\",\"2020-12-30\",\"2020-12-31\",\"2021-01-01\",\"2021-01-02\",\"2021-01-03\",\"2021-01-04\",\"2021-01-05\",\"2021-01-06\",\"2021-01-07\",\"2021-01-08\",\"2021-01-09\",\"2021-01-10\",\"2021-01-11\",\"2021-01-12\",\"2021-01-13\",\"2021-01-14\",\"2021-01-15\",\"2021-01-16\",\"2021-01-17\",\"2021-01-18\",\"2021-01-19\",\"2021-01-20\",\"2021-01-21\",\"2021-01-22\",\"2021-01-23\",\"2021-01-24\",\"2021-01-25\",\"2021-01-26\",\"2021-01-27\",\"2021-01-28\",\"2021-01-29\",\"2021-01-30\",\"2021-01-31\",\"2021-02-01\",\"2021-02-02\",\"2021-02-03\",\"2021-02-04\",\"2021-02-05\",\"2021-02-06\",\"2021-02-07\",\"2021-02-08\",\"2021-02-09\",\"2021-02-10\",\"2021-02-11\",\"2021-02-12\",\"2021-02-13\",\"2021-02-14\",\"2021-02-15\",\"2021-02-16\",\"2021-02-17\",\"2021-02-18\",\"2021-02-19\",\"2021-02-20\",\"2021-02-21\",\"2021-02-22\",\"2021-02-23\",\"2021-02-24\",\"2021-02-25\",\"2021-02-26\",\"2021-02-27\",\"2021-02-28\",\"2021-03-01\",\"2021-03-02\",\"2021-03-03\",\"2021-03-04\",\"2021-03-05\",\"2021-03-06\",\"2021-03-07\",\"2021-03-08\",\"2021-03-09\",\"2021-03-10\",\"2021-03-11\",\"2021-03-12\",\"2021-03-13\",\"2021-03-14\",\"2021-03-15\",\"2021-03-16\",\"2021-03-17\",\"2021-03-18\",\"2021-03-19\",\"2021-03-20\",\"2021-03-21\",\"2021-03-22\",\"2021-03-23\",\"2021-03-24\",\"2021-03-25\",\"2021-03-26\",\"2021-03-27\",\"2021-03-28\",\"2021-03-29\",\"2021-03-30\",\"2021-03-31\",\"2021-04-01\",\"2021-04-02\",\"2021-04-03\",\"2021-04-04\",\"2021-04-05\",\"2021-04-06\",\"2021-04-07\",\"2021-04-08\",\"2021-04-09\",\"2021-04-10\",\"2021-04-11\",\"2021-04-12\",\"2021-04-13\",\"2021-04-14\",\"2021-04-15\",\"2021-04-16\",\"2021-04-17\",\"2021-04-18\",\"2021-04-19\",\"2021-04-20\",\"2021-04-21\",\"2021-04-22\",\"2021-04-23\",\"2021-04-24\",\"2021-04-25\",\"2021-04-26\",\"2021-04-27\",\"2021-04-28\",\"2021-04-29\",\"2021-04-30\",\"2021-05-01\",\"2021-05-02\",\"2021-05-03\",\"2021-05-04\",\"2021-05-05\",\"2021-05-06\",\"2021-05-07\",\"2021-05-08\",\"2021-05-09\",\"2021-05-10\",\"2021-05-11\",\"2021-05-12\",\"2021-05-13\",\"2021-05-14\",\"2021-05-15\",\"2021-05-16\",\"2021-05-17\",\"2021-05-18\",\"2021-05-19\",\"2021-05-20\",\"2021-05-21\",\"2021-05-22\",\"2021-05-23\",\"2021-05-24\",\"2021-05-25\",\"2021-05-26\",\"2021-05-27\",\"2021-05-28\",\"2021-05-29\",\"2021-05-30\",\"2021-05-31\",\"2021-06-01\",\"2021-06-02\",\"2021-06-03\",\"2021-06-04\",\"2021-06-05\",\"2021-06-06\",\"2021-06-07\",\"2021-06-08\",\"2021-06-09\",\"2021-06-10\",\"2021-06-11\",\"2021-06-12\",\"2021-06-13\",\"2021-06-14\",\"2021-06-15\",\"2021-06-16\",\"2021-06-17\",\"2021-06-18\",\"2021-06-19\",\"2021-06-20\",\"2021-06-21\",\"2021-06-22\",\"2021-06-23\",\"2021-06-24\",\"2021-06-25\",\"2021-06-26\",\"2021-06-27\",\"2021-06-28\",\"2021-06-29\",\"2021-06-30\",\"2021-07-01\",\"2021-07-02\",\"2021-07-03\",\"2021-07-04\",\"2021-07-05\",\"2021-07-06\",\"2021-07-07\",\"2021-07-08\",\"2021-07-09\",\"2021-07-10\",\"2021-07-11\",\"2021-07-12\",\"2021-07-13\",\"2021-07-14\",\"2021-07-15\",\"2021-07-16\",\"2021-07-17\",\"2021-07-18\",\"2021-07-19\",\"2021-07-20\",\"2021-07-21\",\"2021-07-22\",\"2021-07-23\",\"2021-07-24\",\"2021-07-25\",\"2021-07-26\",\"2021-07-27\",\"2021-07-28\",\"2021-07-29\",\"2021-07-30\",\"2021-07-31\",\"2021-08-01\",\"2021-08-02\",\"2021-08-03\",\"2021-08-04\",\"2021-08-05\",\"2021-08-06\",\"2021-08-07\",\"2021-08-08\",\"2021-08-09\",\"2021-08-10\",\"2021-08-11\",\"2021-08-12\",\"2021-08-13\",\"2021-08-14\",\"2021-08-15\",\"2021-08-16\",\"2021-08-17\",\"2021-08-18\",\"2021-08-19\",\"2021-08-20\",\"2021-08-21\",\"2021-08-22\",\"2021-08-23\",\"2021-08-24\",\"2021-08-25\",\"2021-08-26\",\"2021-08-27\",\"2021-08-28\",\"2021-08-29\",\"2021-08-30\",\"2021-08-31\",\"2021-09-01\",\"2021-09-02\",\"2021-09-03\",\"2021-09-04\",\"2021-09-05\",\"2021-09-06\",\"2021-09-07\",\"2021-09-08\",\"2021-09-09\",\"2021-09-10\",\"2021-09-11\",\"2021-09-12\",\"2021-09-13\",\"2021-09-14\"],\"y\":[2,7,10,12,13,22,23,26,27,35,41,50,69,87,113,117,134,158,177,201,231,263,295,314,330,347,375,396,416,435,454,467,483,502,539,558,577,595,612,618,626,642,649,655,660,662,669,681,686,687,693,695,697,705,713,719,725,733,739,742,755,761,765,773,780,792,801,804,815,830,843,853,863,866,882,897,903,911,918,930,951,956,984,1000,1022,1047,1056,1084,1105,1157,1194,1228,1263,1318,1342,1375,1461,1538,1612,1662,1715,1744,1796,1871,1939,2058,2127,2213,2277,2368,2515,2684,2836,2979,3130,3269,3459,3753,4023,4311,4621,4996,5241,5486,5836,6485,6845,7231,7596,8036,8482,8986,9546,9969,10551,11114,11534,11811,12361,13129,13669,14600,15229,15841,16344,16800,17290,17820,18187,19015,19464,20005,20683,21445,22081,22802,23286,23872,24624,25303,26129,26931,27737,28465,29084,29643,30409,31075,32134,33084,33820,34463,35305,36307,37292,38485,39699,40546,41287,42184,43305,44458,45680,46920,47947,48780,49897,51224,52549,53969,55454,56424,57361,58138,59516,60818,62374,63712,64899,65602,66689,68059,69459,70816,72049,72984,73714,74604,75760,76828,77829,79182,80407,81129,82142,83497,84828,86053,87439,88490,89223,90238,91780,93152,94348,95514,96443,97075,97922,99425,100616,101826,103088,103949,104460,105322,106553,107570,108866,109971,110717,111257,112120,113261,114367,115417,116363,117099,117587,118566,119768,120939,122123,123223,123949,124592,125590,127012,128231,129418,130722,131677,132295,133190,134520,135742,137093,138248,139099,139638,140172,141340,142505,143685,144891,145845,146421,147430,148688,149815,150947,152096,152620,153169,154096,155263,156388,157472,158491,159258,159893,160804,161942,162990,164062,164607,165204,165762,166799,168114,169321,170591,171130,171719,172436,173591,175038,176407,177614,178649,179405,180061,181093,182156,183242,184187,185145,185653,186016,186877,187712,188477,189308,189959,190390,190745,191345,192066,192637,193276,193844,194280,194569,195009,195537,195992,196438,196944,197225,197435,197852,198338,198756,199187,199577,199842,200024,200454,200888,201241,201678,202227,202466,202674,203097,203496,203914,204341,204706,204906,205086,205514,205890,206293,206640,207056,207272,207460,207832,208244,208717,209093,209573,209840,210016,210447,210948,211433,211903,212390,212670,212925,213438,213999,214608,215178,215706,216010,216268,216764,217346,217884,218156,218449,218808,219162,219846,220753,221630,222544,223435,223917,224386,225343,226412,227533,228577,229637,230301,230837,231967,233498,235274,236930,238760,240037,241240,243167,245601,248382,250991,252982,254821,256676,257980,260535,263094,265486,267515,269978,271478,273714,276887,279926,282741,285536,287304,288626,290920,293820,296632,299219,301664,303390,304529,306899,309486,311922,314102,316440,317845,318986,321279,323598,325779,327979,329815,330992,331920,333820,336007,338048,339900,341542,342738,343604,345312,347157,349026,350630,352212,353298,354095,355620,357523,359266,361005,362568,363512,364304,366161,367938,369540,371206,372641,373634,374324,375812,377091,378938,380482,381878,382715,383500,385069,386722,388298,389798,391067,392039,392781,394135,395667,397469,398608,399751,400574,401188,402044,403511,405206,406814,408200,409160,410180,411123,412918,414745,416677,418351,419574,420462,422344,424472,426474,428295,430087,431271,432149,434081,436276,438587,440647,442695,443962,445442,447672,450291,452997,455784,458062,459691,461145,463726,466574,469565,472315,474663,476709,478144,481100,483984,486959,489784,492330,493979,495360,496736],\"mode\":\"lines\",\"line\":{\"color\":\"blue\"},\"name\":\"Positivos\",\"type\":\"scatter\",\"marker\":{\"color\":\"rgba(31,119,180,1)\",\"line\":{\"color\":\"rgba(31,119,180,1)\"}},\"error_y\":{\"color\":\"rgba(31,119,180,1)\"},\"error_x\":{\"color\":\"rgba(31,119,180,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null},{\"x\":[\"2020-03-06\",\"2020-03-07\",\"2020-03-08\",\"2020-03-09\",\"2020-03-10\",\"2020-03-11\",\"2020-03-12\",\"2020-03-13\",\"2020-03-14\",\"2020-03-15\",\"2020-03-16\",\"2020-03-17\",\"2020-03-18\",\"2020-03-19\",\"2020-03-20\",\"2020-03-21\",\"2020-03-22\",\"2020-03-23\",\"2020-03-24\",\"2020-03-25\",\"2020-03-26\",\"2020-03-27\",\"2020-03-28\",\"2020-03-29\",\"2020-03-30\",\"2020-03-31\",\"2020-04-01\",\"2020-04-02\",\"2020-04-03\",\"2020-04-04\",\"2020-04-05\",\"2020-04-06\",\"2020-04-07\",\"2020-04-08\",\"2020-04-09\",\"2020-04-10\",\"2020-04-11\",\"2020-04-12\",\"2020-04-13\",\"2020-04-14\",\"2020-04-15\",\"2020-04-16\",\"2020-04-17\",\"2020-04-18\",\"2020-04-19\",\"2020-04-20\",\"2020-04-21\",\"2020-04-22\",\"2020-04-23\",\"2020-04-24\",\"2020-04-25\",\"2020-04-26\",\"2020-04-27\",\"2020-04-28\",\"2020-04-29\",\"2020-04-30\",\"2020-05-01\",\"2020-05-02\",\"2020-05-03\",\"2020-05-04\",\"2020-05-05\",\"2020-05-06\",\"2020-05-07\",\"2020-05-08\",\"2020-05-09\",\"2020-05-10\",\"2020-05-11\",\"2020-05-12\",\"2020-05-13\",\"2020-05-14\",\"2020-05-15\",\"2020-05-16\",\"2020-05-17\",\"2020-05-18\",\"2020-05-19\",\"2020-05-20\",\"2020-05-21\",\"2020-05-22\",\"2020-05-23\",\"2020-05-24\",\"2020-05-25\",\"2020-05-26\",\"2020-05-27\",\"2020-05-28\",\"2020-05-29\",\"2020-05-30\",\"2020-05-31\",\"2020-06-01\",\"2020-06-02\",\"2020-06-03\",\"2020-06-04\",\"2020-06-05\",\"2020-06-06\",\"2020-06-07\",\"2020-06-08\",\"2020-06-09\",\"2020-06-10\",\"2020-06-11\",\"2020-06-12\",\"2020-06-13\",\"2020-06-14\",\"2020-06-15\",\"2020-06-16\",\"2020-06-17\",\"2020-06-18\",\"2020-06-19\",\"2020-06-20\",\"2020-06-21\",\"2020-06-22\",\"2020-06-23\",\"2020-06-24\",\"2020-06-25\",\"2020-06-26\",\"2020-06-27\",\"2020-06-28\",\"2020-06-29\",\"2020-06-30\",\"2020-07-01\",\"2020-07-02\",\"2020-07-03\",\"2020-07-04\",\"2020-07-05\",\"2020-07-06\",\"2020-07-07\",\"2020-07-08\",\"2020-07-09\",\"2020-07-10\",\"2020-07-11\",\"2020-07-12\",\"2020-07-13\",\"2020-07-14\",\"2020-07-15\",\"2020-07-16\",\"2020-07-17\",\"2020-07-18\",\"2020-07-19\",\"2020-07-20\",\"2020-07-21\",\"2020-07-22\",\"2020-07-23\",\"2020-07-24\",\"2020-07-25\",\"2020-07-26\",\"2020-07-27\",\"2020-07-28\",\"2020-07-29\",\"2020-07-30\",\"2020-07-31\",\"2020-08-01\",\"2020-08-02\",\"2020-08-03\",\"2020-08-04\",\"2020-08-05\",\"2020-08-06\",\"2020-08-07\",\"2020-08-08\",\"2020-08-09\",\"2020-08-10\",\"2020-08-11\",\"2020-08-12\",\"2020-08-13\",\"2020-08-14\",\"2020-08-15\",\"2020-08-16\",\"2020-08-17\",\"2020-08-18\",\"2020-08-19\",\"2020-08-20\",\"2020-08-21\",\"2020-08-22\",\"2020-08-23\",\"2020-08-24\",\"2020-08-25\",\"2020-08-26\",\"2020-08-27\",\"2020-08-28\",\"2020-08-29\",\"2020-08-30\",\"2020-08-31\",\"2020-09-01\",\"2020-09-02\",\"2020-09-03\",\"2020-09-04\",\"2020-09-05\",\"2020-09-06\",\"2020-09-07\",\"2020-09-08\",\"2020-09-09\",\"2020-09-10\",\"2020-09-11\",\"2020-09-12\",\"2020-09-13\",\"2020-09-14\",\"2020-09-15\",\"2020-09-16\",\"2020-09-17\",\"2020-09-18\",\"2020-09-19\",\"2020-09-20\",\"2020-09-21\",\"2020-09-22\",\"2020-09-23\",\"2020-09-24\",\"2020-09-25\",\"2020-09-26\",\"2020-09-27\",\"2020-09-28\",\"2020-09-29\",\"2020-09-30\",\"2020-10-01\",\"2020-10-02\",\"2020-10-03\",\"2020-10-04\",\"2020-10-05\",\"2020-10-06\",\"2020-10-07\",\"2020-10-08\",\"2020-10-09\",\"2020-10-10\",\"2020-10-11\",\"2020-10-12\",\"2020-10-13\",\"2020-10-14\",\"2020-10-15\",\"2020-10-16\",\"2020-10-17\",\"2020-10-18\",\"2020-10-19\",\"2020-10-20\",\"2020-10-21\",\"2020-10-22\",\"2020-10-23\",\"2020-10-24\",\"2020-10-25\",\"2020-10-26\",\"2020-10-27\",\"2020-10-28\",\"2020-10-29\",\"2020-10-30\",\"2020-10-31\",\"2020-11-01\",\"2020-11-02\",\"2020-11-03\",\"2020-11-04\",\"2020-11-05\",\"2020-11-06\",\"2020-11-07\",\"2020-11-08\",\"2020-11-09\",\"2020-11-10\",\"2020-11-11\",\"2020-11-12\",\"2020-11-13\",\"2020-11-14\",\"2020-11-15\",\"2020-11-16\",\"2020-11-17\",\"2020-11-18\",\"2020-11-19\",\"2020-11-20\",\"2020-11-21\",\"2020-11-22\",\"2020-11-23\",\"2020-11-24\",\"2020-11-25\",\"2020-11-26\",\"2020-11-27\",\"2020-11-28\",\"2020-11-29\",\"2020-11-30\",\"2020-12-01\",\"2020-12-02\",\"2020-12-03\",\"2020-12-04\",\"2020-12-05\",\"2020-12-06\",\"2020-12-07\",\"2020-12-08\",\"2020-12-09\",\"2020-12-10\",\"2020-12-11\",\"2020-12-12\",\"2020-12-13\",\"2020-12-14\",\"2020-12-15\",\"2020-12-16\",\"2020-12-17\",\"2020-12-18\",\"2020-12-19\",\"2020-12-20\",\"2020-12-21\",\"2020-12-22\",\"2020-12-23\",\"2020-12-24\",\"2020-12-25\",\"2020-12-26\",\"2020-12-27\",\"2020-12-28\",\"2020-12-29\",\"2020-12-30\",\"2020-12-31\",\"2021-01-01\",\"2021-01-02\",\"2021-01-03\",\"2021-01-04\",\"2021-01-05\",\"2021-01-06\",\"2021-01-07\",\"2021-01-08\",\"2021-01-09\",\"2021-01-10\",\"2021-01-11\",\"2021-01-12\",\"2021-01-13\",\"2021-01-14\",\"2021-01-15\",\"2021-01-16\",\"2021-01-17\",\"2021-01-18\",\"2021-01-19\",\"2021-01-20\",\"2021-01-21\",\"2021-01-22\",\"2021-01-23\",\"2021-01-24\",\"2021-01-25\",\"2021-01-26\",\"2021-01-27\",\"2021-01-28\",\"2021-01-29\",\"2021-01-30\",\"2021-01-31\",\"2021-02-01\",\"2021-02-02\",\"2021-02-03\",\"2021-02-04\",\"2021-02-05\",\"2021-02-06\",\"2021-02-07\",\"2021-02-08\",\"2021-02-09\",\"2021-02-10\",\"2021-02-11\",\"2021-02-12\",\"2021-02-13\",\"2021-02-14\",\"2021-02-15\",\"2021-02-16\",\"2021-02-17\",\"2021-02-18\",\"2021-02-19\",\"2021-02-20\",\"2021-02-21\",\"2021-02-22\",\"2021-02-23\",\"2021-02-24\",\"2021-02-25\",\"2021-02-26\",\"2021-02-27\",\"2021-02-28\",\"2021-03-01\",\"2021-03-02\",\"2021-03-03\",\"2021-03-04\",\"2021-03-05\",\"2021-03-06\",\"2021-03-07\",\"2021-03-08\",\"2021-03-09\",\"2021-03-10\",\"2021-03-11\",\"2021-03-12\",\"2021-03-13\",\"2021-03-14\",\"2021-03-15\",\"2021-03-16\",\"2021-03-17\",\"2021-03-18\",\"2021-03-19\",\"2021-03-20\",\"2021-03-21\",\"2021-03-22\",\"2021-03-23\",\"2021-03-24\",\"2021-03-25\",\"2021-03-26\",\"2021-03-27\",\"2021-03-28\",\"2021-03-29\",\"2021-03-30\",\"2021-03-31\",\"2021-04-01\",\"2021-04-02\",\"2021-04-03\",\"2021-04-04\",\"2021-04-05\",\"2021-04-06\",\"2021-04-07\",\"2021-04-08\",\"2021-04-09\",\"2021-04-10\",\"2021-04-11\",\"2021-04-12\",\"2021-04-13\",\"2021-04-14\",\"2021-04-15\",\"2021-04-16\",\"2021-04-17\",\"2021-04-18\",\"2021-04-19\",\"2021-04-20\",\"2021-04-21\",\"2021-04-22\",\"2021-04-23\",\"2021-04-24\",\"2021-04-25\",\"2021-04-26\",\"2021-04-27\",\"2021-04-28\",\"2021-04-29\",\"2021-04-30\",\"2021-05-01\",\"2021-05-02\",\"2021-05-03\",\"2021-05-04\",\"2021-05-05\",\"2021-05-06\",\"2021-05-07\",\"2021-05-08\",\"2021-05-09\",\"2021-05-10\",\"2021-05-11\",\"2021-05-12\",\"2021-05-13\",\"2021-05-14\",\"2021-05-15\",\"2021-05-16\",\"2021-05-17\",\"2021-05-18\",\"2021-05-19\",\"2021-05-20\",\"2021-05-21\",\"2021-05-22\",\"2021-05-23\",\"2021-05-24\",\"2021-05-25\",\"2021-05-26\",\"2021-05-27\",\"2021-05-28\",\"2021-05-29\",\"2021-05-30\",\"2021-05-31\",\"2021-06-01\",\"2021-06-02\",\"2021-06-03\",\"2021-06-04\",\"2021-06-05\",\"2021-06-06\",\"2021-06-07\",\"2021-06-08\",\"2021-06-09\",\"2021-06-10\",\"2021-06-11\",\"2021-06-12\",\"2021-06-13\",\"2021-06-14\",\"2021-06-15\",\"2021-06-16\",\"2021-06-17\",\"2021-06-18\",\"2021-06-19\",\"2021-06-20\",\"2021-06-21\",\"2021-06-22\",\"2021-06-23\",\"2021-06-24\",\"2021-06-25\",\"2021-06-26\",\"2021-06-27\",\"2021-06-28\",\"2021-06-29\",\"2021-06-30\",\"2021-07-01\",\"2021-07-02\",\"2021-07-03\",\"2021-07-04\",\"2021-07-05\",\"2021-07-06\",\"2021-07-07\",\"2021-07-08\",\"2021-07-09\",\"2021-07-10\",\"2021-07-11\",\"2021-07-12\",\"2021-07-13\",\"2021-07-14\",\"2021-07-15\",\"2021-07-16\",\"2021-07-17\",\"2021-07-18\",\"2021-07-19\",\"2021-07-20\",\"2021-07-21\",\"2021-07-22\",\"2021-07-23\",\"2021-07-24\",\"2021-07-25\",\"2021-07-26\",\"2021-07-27\",\"2021-07-28\",\"2021-07-29\",\"2021-07-30\",\"2021-07-31\",\"2021-08-01\",\"2021-08-02\",\"2021-08-03\",\"2021-08-04\",\"2021-08-05\",\"2021-08-06\",\"2021-08-07\",\"2021-08-08\",\"2021-08-09\",\"2021-08-10\",\"2021-08-11\",\"2021-08-12\",\"2021-08-13\",\"2021-08-14\",\"2021-08-15\",\"2021-08-16\",\"2021-08-17\",\"2021-08-18\",\"2021-08-19\",\"2021-08-20\",\"2021-08-21\",\"2021-08-22\",\"2021-08-23\",\"2021-08-24\",\"2021-08-25\",\"2021-08-26\",\"2021-08-27\",\"2021-08-28\",\"2021-08-29\",\"2021-08-30\",\"2021-08-31\",\"2021-09-01\",\"2021-09-02\",\"2021-09-03\",\"2021-09-04\",\"2021-09-05\",\"2021-09-06\",\"2021-09-07\",\"2021-09-08\",\"2021-09-09\",\"2021-09-10\",\"2021-09-11\",\"2021-09-12\",\"2021-09-13\",\"2021-09-14\"],\"y\":[2,7,10,12,13,22,23,26,27,35,41,50,69,86,111,113,130,154,173,197,227,258,290,309,324,341,369,388,403,420,436,447,457,471,506,513,525,536,547,549,555,564,557,554,544,532,513,495,484,465,445,425,404,393,384,375,364,355,347,337,336,327,314,306,294,285,277,277,281,287,293,292,288,281,295,305,301,301,301,300,313,312,335,344,359,379,377,398,413,462,497,523,552,604,620,647,727,804,869,907,951,961,990,960,990,1064,1101,1169,1222,1227,1293,1445,1544,1641,1749,1860,2007,2221,2417,2636,2882,3232,3452,3653,3883,4437,4709,4983,5327,5701,6005,6395,6831,7104,7595,8086,8449,8549,8968,9601,10077,10862,11389,11902,12299,12617,12870,13266,13502,14268,14604,13234,13641,14207,14597,14985,15321,15805,16398,16851,17445,17865,18436,19109,19547,19867,20428,20803,21635,22364,22947,21343,21856,22604,22424,23414,23544,24147,24795,25471,26340,26143,27158,28231,29011,29187,30081,31137,31660,32676,33936,34750,35534,35969,37115,37490,38520,39454,40330,39730,40223,41142,42110,42981,43461,43555,43433,43021,37015,36068,34278,33225,31887,30439,31118,32178,32006,32671,33694,34317,34868,35444,36491,34262,34911,35515,36200,36291,36591,37451,38203,38899,39769,40429,39439,39587,40217,40547,41293,41867,42384,41724,42097,42687,42921,43543,43780,44422,43847,44123,44746,45157,45718,46336,46703,45862,46454,47186,47781,48438,48826,49694,49318,49555,50235,50790,50412,51059,51745,50386,50720,51375,49324,46123,44488,43115,41741,39898,39200,38078,36430,35402,33944,32722,31109,30349,29501,29988,30685,31064,31079,31135,31661,32062,32849,33274,33789,33329,33654,34436,35213,35916,36362,36758,37291,37736,37860,38646,39226,39405,39926,39077,39429,39805,40268,40397,40695,41098,41313,40370,40343,40247,40342,40054,39732,39038,38970,38734,38656,38720,38693,39034,38872,38141,37842,37749,37585,36524,36542,36460,36334,36051,35584,35527,35628,34767,33960,32278,31164,30178,29862,28843,27913,27612,26721,26607,25235,24442,23058,22108,20423,18783,18021,17371,16323,16408,16565,16644,16833,17181,17117,17264,17420,17595,17655,17879,18153,18500,18771,19059,19281,19295,19580,19906,20237,20540,20848,21072,20925,21108,21430,21774,21926,21925,22252,22526,22989,23493,24110,24766,25100,25242,25685,26239,26784,27716,28532,29214,29704,29896,29697,31004,32370,33812,35209,36158,36808,38197,40184,42572,44751,46205,47095,47919,48351,47874,48710,49596,51108,52679,53260,54067,55721,57307,57291,59031,59974,60647,62089,64174,66229,66865,68505,69327,70045,71703,66607,68076,68121,69495,70679,71450,72623,73792,74969,75921,76847,77827,78483,76881,72907,73878,74383,74774,75612,76364,75650,76471,76798,74029,70826,71205,71340,70032,69021,69329,69155,69132,69648,70111,69422,69739,69994,70424,69597,70086,69690,70089,70612,69783,70283,71289,72092,71414,71670,70119,70967,71701,70985,70846,70585,70784,71011,71488,71244,71724,72370,71974,71918,71865,72944,72145,70862,70866,71054,71936,73072,74127,74130,74194,73785,72901,73406,73297,72887,72984,74133,75297,76131,77633,78660,80060,81325,82623,82468,82842,82460,83803,82929,83781,84137,84345,84929,85526,86421,88553,89150,88959,89764,88148,88456,89753,89953,91037,92151,92233,92300,90208],\"mode\":\"lines\",\"line\":{\"color\":\"red\"},\"name\":\"Activos\",\"type\":\"scatter\",\"marker\":{\"color\":\"rgba(255,127,14,1)\",\"line\":{\"color\":\"rgba(255,127,14,1)\"}},\"error_y\":{\"color\":\"rgba(255,127,14,1)\"},\"error_x\":{\"color\":\"rgba(255,127,14,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null},{\"x\":[\"2020-03-06\",\"2020-03-07\",\"2020-03-08\",\"2020-03-09\",\"2020-03-10\",\"2020-03-11\",\"2020-03-12\",\"2020-03-13\",\"2020-03-14\",\"2020-03-15\",\"2020-03-16\",\"2020-03-17\",\"2020-03-18\",\"2020-03-19\",\"2020-03-20\",\"2020-03-21\",\"2020-03-22\",\"2020-03-23\",\"2020-03-24\",\"2020-03-25\",\"2020-03-26\",\"2020-03-27\",\"2020-03-28\",\"2020-03-29\",\"2020-03-30\",\"2020-03-31\",\"2020-04-01\",\"2020-04-02\",\"2020-04-03\",\"2020-04-04\",\"2020-04-05\",\"2020-04-06\",\"2020-04-07\",\"2020-04-08\",\"2020-04-09\",\"2020-04-10\",\"2020-04-11\",\"2020-04-12\",\"2020-04-13\",\"2020-04-14\",\"2020-04-15\",\"2020-04-16\",\"2020-04-17\",\"2020-04-18\",\"2020-04-19\",\"2020-04-20\",\"2020-04-21\",\"2020-04-22\",\"2020-04-23\",\"2020-04-24\",\"2020-04-25\",\"2020-04-26\",\"2020-04-27\",\"2020-04-28\",\"2020-04-29\",\"2020-04-30\",\"2020-05-01\",\"2020-05-02\",\"2020-05-03\",\"2020-05-04\",\"2020-05-05\",\"2020-05-06\",\"2020-05-07\",\"2020-05-08\",\"2020-05-09\",\"2020-05-10\",\"2020-05-11\",\"2020-05-12\",\"2020-05-13\",\"2020-05-14\",\"2020-05-15\",\"2020-05-16\",\"2020-05-17\",\"2020-05-18\",\"2020-05-19\",\"2020-05-20\",\"2020-05-21\",\"2020-05-22\",\"2020-05-23\",\"2020-05-24\",\"2020-05-25\",\"2020-05-26\",\"2020-05-27\",\"2020-05-28\",\"2020-05-29\",\"2020-05-30\",\"2020-05-31\",\"2020-06-01\",\"2020-06-02\",\"2020-06-03\",\"2020-06-04\",\"2020-06-05\",\"2020-06-06\",\"2020-06-07\",\"2020-06-08\",\"2020-06-09\",\"2020-06-10\",\"2020-06-11\",\"2020-06-12\",\"2020-06-13\",\"2020-06-14\",\"2020-06-15\",\"2020-06-16\",\"2020-06-17\",\"2020-06-18\",\"2020-06-19\",\"2020-06-20\",\"2020-06-21\",\"2020-06-22\",\"2020-06-23\",\"2020-06-24\",\"2020-06-25\",\"2020-06-26\",\"2020-06-27\",\"2020-06-28\",\"2020-06-29\",\"2020-06-30\",\"2020-07-01\",\"2020-07-02\",\"2020-07-03\",\"2020-07-04\",\"2020-07-05\",\"2020-07-06\",\"2020-07-07\",\"2020-07-08\",\"2020-07-09\",\"2020-07-10\",\"2020-07-11\",\"2020-07-12\",\"2020-07-13\",\"2020-07-14\",\"2020-07-15\",\"2020-07-16\",\"2020-07-17\",\"2020-07-18\",\"2020-07-19\",\"2020-07-20\",\"2020-07-21\",\"2020-07-22\",\"2020-07-23\",\"2020-07-24\",\"2020-07-25\",\"2020-07-26\",\"2020-07-27\",\"2020-07-28\",\"2020-07-29\",\"2020-07-30\",\"2020-07-31\",\"2020-08-01\",\"2020-08-02\",\"2020-08-03\",\"2020-08-04\",\"2020-08-05\",\"2020-08-06\",\"2020-08-07\",\"2020-08-08\",\"2020-08-09\",\"2020-08-10\",\"2020-08-11\",\"2020-08-12\",\"2020-08-13\",\"2020-08-14\",\"2020-08-15\",\"2020-08-16\",\"2020-08-17\",\"2020-08-18\",\"2020-08-19\",\"2020-08-20\",\"2020-08-21\",\"2020-08-22\",\"2020-08-23\",\"2020-08-24\",\"2020-08-25\",\"2020-08-26\",\"2020-08-27\",\"2020-08-28\",\"2020-08-29\",\"2020-08-30\",\"2020-08-31\",\"2020-09-01\",\"2020-09-02\",\"2020-09-03\",\"2020-09-04\",\"2020-09-05\",\"2020-09-06\",\"2020-09-07\",\"2020-09-08\",\"2020-09-09\",\"2020-09-10\",\"2020-09-11\",\"2020-09-12\",\"2020-09-13\",\"2020-09-14\",\"2020-09-15\",\"2020-09-16\",\"2020-09-17\",\"2020-09-18\",\"2020-09-19\",\"2020-09-20\",\"2020-09-21\",\"2020-09-22\",\"2020-09-23\",\"2020-09-24\",\"2020-09-25\",\"2020-09-26\",\"2020-09-27\",\"2020-09-28\",\"2020-09-29\",\"2020-09-30\",\"2020-10-01\",\"2020-10-02\",\"2020-10-03\",\"2020-10-04\",\"2020-10-05\",\"2020-10-06\",\"2020-10-07\",\"2020-10-08\",\"2020-10-09\",\"2020-10-10\",\"2020-10-11\",\"2020-10-12\",\"2020-10-13\",\"2020-10-14\",\"2020-10-15\",\"2020-10-16\",\"2020-10-17\",\"2020-10-18\",\"2020-10-19\",\"2020-10-20\",\"2020-10-21\",\"2020-10-22\",\"2020-10-23\",\"2020-10-24\",\"2020-10-25\",\"2020-10-26\",\"2020-10-27\",\"2020-10-28\",\"2020-10-29\",\"2020-10-30\",\"2020-10-31\",\"2020-11-01\",\"2020-11-02\",\"2020-11-03\",\"2020-11-04\",\"2020-11-05\",\"2020-11-06\",\"2020-11-07\",\"2020-11-08\",\"2020-11-09\",\"2020-11-10\",\"2020-11-11\",\"2020-11-12\",\"2020-11-13\",\"2020-11-14\",\"2020-11-15\",\"2020-11-16\",\"2020-11-17\",\"2020-11-18\",\"2020-11-19\",\"2020-11-20\",\"2020-11-21\",\"2020-11-22\",\"2020-11-23\",\"2020-11-24\",\"2020-11-25\",\"2020-11-26\",\"2020-11-27\",\"2020-11-28\",\"2020-11-29\",\"2020-11-30\",\"2020-12-01\",\"2020-12-02\",\"2020-12-03\",\"2020-12-04\",\"2020-12-05\",\"2020-12-06\",\"2020-12-07\",\"2020-12-08\",\"2020-12-09\",\"2020-12-10\",\"2020-12-11\",\"2020-12-12\",\"2020-12-13\",\"2020-12-14\",\"2020-12-15\",\"2020-12-16\",\"2020-12-17\",\"2020-12-18\",\"2020-12-19\",\"2020-12-20\",\"2020-12-21\",\"2020-12-22\",\"2020-12-23\",\"2020-12-24\",\"2020-12-25\",\"2020-12-26\",\"2020-12-27\",\"2020-12-28\",\"2020-12-29\",\"2020-12-30\",\"2020-12-31\",\"2021-01-01\",\"2021-01-02\",\"2021-01-03\",\"2021-01-04\",\"2021-01-05\",\"2021-01-06\",\"2021-01-07\",\"2021-01-08\",\"2021-01-09\",\"2021-01-10\",\"2021-01-11\",\"2021-01-12\",\"2021-01-13\",\"2021-01-14\",\"2021-01-15\",\"2021-01-16\",\"2021-01-17\",\"2021-01-18\",\"2021-01-19\",\"2021-01-20\",\"2021-01-21\",\"2021-01-22\",\"2021-01-23\",\"2021-01-24\",\"2021-01-25\",\"2021-01-26\",\"2021-01-27\",\"2021-01-28\",\"2021-01-29\",\"2021-01-30\",\"2021-01-31\",\"2021-02-01\",\"2021-02-02\",\"2021-02-03\",\"2021-02-04\",\"2021-02-05\",\"2021-02-06\",\"2021-02-07\",\"2021-02-08\",\"2021-02-09\",\"2021-02-10\",\"2021-02-11\",\"2021-02-12\",\"2021-02-13\",\"2021-02-14\",\"2021-02-15\",\"2021-02-16\",\"2021-02-17\",\"2021-02-18\",\"2021-02-19\",\"2021-02-20\",\"2021-02-21\",\"2021-02-22\",\"2021-02-23\",\"2021-02-24\",\"2021-02-25\",\"2021-02-26\",\"2021-02-27\",\"2021-02-28\",\"2021-03-01\",\"2021-03-02\",\"2021-03-03\",\"2021-03-04\",\"2021-03-05\",\"2021-03-06\",\"2021-03-07\",\"2021-03-08\",\"2021-03-09\",\"2021-03-10\",\"2021-03-11\",\"2021-03-12\",\"2021-03-13\",\"2021-03-14\",\"2021-03-15\",\"2021-03-16\",\"2021-03-17\",\"2021-03-18\",\"2021-03-19\",\"2021-03-20\",\"2021-03-21\",\"2021-03-22\",\"2021-03-23\",\"2021-03-24\",\"2021-03-25\",\"2021-03-26\",\"2021-03-27\",\"2021-03-28\",\"2021-03-29\",\"2021-03-30\",\"2021-03-31\",\"2021-04-01\",\"2021-04-02\",\"2021-04-03\",\"2021-04-04\",\"2021-04-05\",\"2021-04-06\",\"2021-04-07\",\"2021-04-08\",\"2021-04-09\",\"2021-04-10\",\"2021-04-11\",\"2021-04-12\",\"2021-04-13\",\"2021-04-14\",\"2021-04-15\",\"2021-04-16\",\"2021-04-17\",\"2021-04-18\",\"2021-04-19\",\"2021-04-20\",\"2021-04-21\",\"2021-04-22\",\"2021-04-23\",\"2021-04-24\",\"2021-04-25\",\"2021-04-26\",\"2021-04-27\",\"2021-04-28\",\"2021-04-29\",\"2021-04-30\",\"2021-05-01\",\"2021-05-02\",\"2021-05-03\",\"2021-05-04\",\"2021-05-05\",\"2021-05-06\",\"2021-05-07\",\"2021-05-08\",\"2021-05-09\",\"2021-05-10\",\"2021-05-11\",\"2021-05-12\",\"2021-05-13\",\"2021-05-14\",\"2021-05-15\",\"2021-05-16\",\"2021-05-17\",\"2021-05-18\",\"2021-05-19\",\"2021-05-20\",\"2021-05-21\",\"2021-05-22\",\"2021-05-23\",\"2021-05-24\",\"2021-05-25\",\"2021-05-26\",\"2021-05-27\",\"2021-05-28\",\"2021-05-29\",\"2021-05-30\",\"2021-05-31\",\"2021-06-01\",\"2021-06-02\",\"2021-06-03\",\"2021-06-04\",\"2021-06-05\",\"2021-06-06\",\"2021-06-07\",\"2021-06-08\",\"2021-06-09\",\"2021-06-10\",\"2021-06-11\",\"2021-06-12\",\"2021-06-13\",\"2021-06-14\",\"2021-06-15\",\"2021-06-16\",\"2021-06-17\",\"2021-06-18\",\"2021-06-19\",\"2021-06-20\",\"2021-06-21\",\"2021-06-22\",\"2021-06-23\",\"2021-06-24\",\"2021-06-25\",\"2021-06-26\",\"2021-06-27\",\"2021-06-28\",\"2021-06-29\",\"2021-06-30\",\"2021-07-01\",\"2021-07-02\",\"2021-07-03\",\"2021-07-04\",\"2021-07-05\",\"2021-07-06\",\"2021-07-07\",\"2021-07-08\",\"2021-07-09\",\"2021-07-10\",\"2021-07-11\",\"2021-07-12\",\"2021-07-13\",\"2021-07-14\",\"2021-07-15\",\"2021-07-16\",\"2021-07-17\",\"2021-07-18\",\"2021-07-19\",\"2021-07-20\",\"2021-07-21\",\"2021-07-22\",\"2021-07-23\",\"2021-07-24\",\"2021-07-25\",\"2021-07-26\",\"2021-07-27\",\"2021-07-28\",\"2021-07-29\",\"2021-07-30\",\"2021-07-31\",\"2021-08-01\",\"2021-08-02\",\"2021-08-03\",\"2021-08-04\",\"2021-08-05\",\"2021-08-06\",\"2021-08-07\",\"2021-08-08\",\"2021-08-09\",\"2021-08-10\",\"2021-08-11\",\"2021-08-12\",\"2021-08-13\",\"2021-08-14\",\"2021-08-15\",\"2021-08-16\",\"2021-08-17\",\"2021-08-18\",\"2021-08-19\",\"2021-08-20\",\"2021-08-21\",\"2021-08-22\",\"2021-08-23\",\"2021-08-24\",\"2021-08-25\",\"2021-08-26\",\"2021-08-27\",\"2021-08-28\",\"2021-08-29\",\"2021-08-30\",\"2021-08-31\",\"2021-09-01\",\"2021-09-02\",\"2021-09-03\",\"2021-09-04\",\"2021-09-05\",\"2021-09-06\",\"2021-09-07\",\"2021-09-08\",\"2021-09-09\",\"2021-09-10\",\"2021-09-11\",\"2021-09-12\",\"2021-09-13\",\"2021-09-14\"],\"y\":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,3,3,3,4,4,4,6,11,13,16,18,24,29,30,42,49,56,62,66,67,74,88,97,112,124,150,180,196,216,242,264,287,306,323,338,355,372,386,399,413,428,445,461,480,501,517,520,527,535,542,551,565,575,577,582,592,600,607,620,628,634,639,646,653,658,669,676,682,685,687,695,701,704,712,717,722,722,731,743,752,771,794,899,937,982,1014,1032,1043,1129,1210,1227,1280,1325,1366,1394,1436,1516,1589,1657,1721,1745,1766,1810,1929,2023,2110,2220,2239,2304,2441,2551,2673,2818,2902,2966,3019,3194,3322,3448,3505,3640,3736,3824,3920,4050,4280,4404,4531,4585,4689,6590,6851,7038,7266,7589,7730,7823,7971,8189,8412,8785,9010,9062,9233,9462,9660,9939,10159,10372,10518,12758,13073,13317,14471,14664,15737,15970,16056,16270,16512,17855,18053,18211,18445,19083,19285,19544,20322,20710,20928,21069,21206,21536,21752,22662,23168,23552,23842,25127,25706,26136,26554,27023,27760,28582,29420,30703,37841,39843,42621,45007,47549,49703,50020,50295,51782,52327,52669,53083,53247,53670,54155,57731,58269,58816,59049,59580,60109,60738,61162,61662,62037,62222,63709,64406,64996,65666,66202,66719,66937,68129,68604,69143,70002,70421,71119,71201,72249,72941,73509,74255,74868,75341,75691,77164,77558,78238,78851,79372,80272,80349,81336,81973,82611,83273,84991,85489,85639,87526,87721,88226,91424,95789,98610,100920,102855,105686,107624,109855,112622,114781,116755,118511,121031,122947,124907,125488,125795,126171,126777,127618,128216,128842,129110,129216,129281,130289,130989,131507,131923,132482,132563,132743,132916,133607,134911,135475,136083,136922,137141,138631,139297,139967,140573,141374,142017,142106,142245,144030,144877,145724,146448,147373,148115,149149,149808,150748,151382,151952,152539,152619,153063,154227,155045,155581,156181,157740,157996,158283,158820,159586,160462,160946,161230,162352,163334,165439,166979,168307,169053,170613,171776,172280,173591,174096,175883,177099,178845,179992,181851,183911,185045,186093,187484,187813,187869,187975,188151,188211,188741,188967,189286,189370,189480,189682,189904,190039,190236,190434,190489,190726,190950,191179,191448,191707,191922,191996,192394,192699,192951,193140,193256,193543,193573,193644,193857,194256,194509,194760,195311,195645,195665,196060,196574,196752,196974,197339,197506,197842,199166,199379,199779,199982,200408,200721,201264,201784,202215,202593,203009,203523,204460,205467,206319,209335,211043,212525,213021,213890,214788,216191,217684,219105,221903,222934,223737,224354,225158,225950,226667,228589,229362,230243,230635,231319,238971,239917,242019,242952,243144,243495,244582,245708,246686,247905,248793,248960,249209,252688,258822,259872,261195,262422,262757,262852,265255,266249,267769,272128,276896,277587,278225,281042,283935,285356,287248,288822,289235,289545,292078,293532,294872,296096,298341,298830,299908,300983,301726,304395,305426,305803,305829,307274,308570,311761,312474,313223,315202,316298,317290,318436,319731,321048,322423,323078,323238,324233,325139,326649,327249,329639,332296,333246,334067,334117,334759,335510,337423,339021,340645,342399,343769,345990,348388,350100,350729,350738,350763,351179,352332,353231,354010,354742,356152,357239,359834,361094,364651,366572,368468,369875,370724,372694,374630,375472,377597,380111,381327,384354,386971,388529,391285,392993,394399,395941,397228,400677],\"mode\":\"lines\",\"line\":{\"color\":\"green\"},\"name\":\"Recuperados\",\"type\":\"scatter\",\"marker\":{\"color\":\"rgba(44,160,44,1)\",\"line\":{\"color\":\"rgba(44,160,44,1)\"}},\"error_y\":{\"color\":\"rgba(44,160,44,1)\"},\"error_x\":{\"color\":\"rgba(44,160,44,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null},{\"x\":[\"2020-03-06\",\"2020-03-07\",\"2020-03-08\",\"2020-03-09\",\"2020-03-10\",\"2020-03-11\",\"2020-03-12\",\"2020-03-13\",\"2020-03-14\",\"2020-03-15\",\"2020-03-16\",\"2020-03-17\",\"2020-03-18\",\"2020-03-19\",\"2020-03-20\",\"2020-03-21\",\"2020-03-22\",\"2020-03-23\",\"2020-03-24\",\"2020-03-25\",\"2020-03-26\",\"2020-03-27\",\"2020-03-28\",\"2020-03-29\",\"2020-03-30\",\"2020-03-31\",\"2020-04-01\",\"2020-04-02\",\"2020-04-03\",\"2020-04-04\",\"2020-04-05\",\"2020-04-06\",\"2020-04-07\",\"2020-04-08\",\"2020-04-09\",\"2020-04-10\",\"2020-04-11\",\"2020-04-12\",\"2020-04-13\",\"2020-04-14\",\"2020-04-15\",\"2020-04-16\",\"2020-04-17\",\"2020-04-18\",\"2020-04-19\",\"2020-04-20\",\"2020-04-21\",\"2020-04-22\",\"2020-04-23\",\"2020-04-24\",\"2020-04-25\",\"2020-04-26\",\"2020-04-27\",\"2020-04-28\",\"2020-04-29\",\"2020-04-30\",\"2020-05-01\",\"2020-05-02\",\"2020-05-03\",\"2020-05-04\",\"2020-05-05\",\"2020-05-06\",\"2020-05-07\",\"2020-05-08\",\"2020-05-09\",\"2020-05-10\",\"2020-05-11\",\"2020-05-12\",\"2020-05-13\",\"2020-05-14\",\"2020-05-15\",\"2020-05-16\",\"2020-05-17\",\"2020-05-18\",\"2020-05-19\",\"2020-05-20\",\"2020-05-21\",\"2020-05-22\",\"2020-05-23\",\"2020-05-24\",\"2020-05-25\",\"2020-05-26\",\"2020-05-27\",\"2020-05-28\",\"2020-05-29\",\"2020-05-30\",\"2020-05-31\",\"2020-06-01\",\"2020-06-02\",\"2020-06-03\",\"2020-06-04\",\"2020-06-05\",\"2020-06-06\",\"2020-06-07\",\"2020-06-08\",\"2020-06-09\",\"2020-06-10\",\"2020-06-11\",\"2020-06-12\",\"2020-06-13\",\"2020-06-14\",\"2020-06-15\",\"2020-06-16\",\"2020-06-17\",\"2020-06-18\",\"2020-06-19\",\"2020-06-20\",\"2020-06-21\",\"2020-06-22\",\"2020-06-23\",\"2020-06-24\",\"2020-06-25\",\"2020-06-26\",\"2020-06-27\",\"2020-06-28\",\"2020-06-29\",\"2020-06-30\",\"2020-07-01\",\"2020-07-02\",\"2020-07-03\",\"2020-07-04\",\"2020-07-05\",\"2020-07-06\",\"2020-07-07\",\"2020-07-08\",\"2020-07-09\",\"2020-07-10\",\"2020-07-11\",\"2020-07-12\",\"2020-07-13\",\"2020-07-14\",\"2020-07-15\",\"2020-07-16\",\"2020-07-17\",\"2020-07-18\",\"2020-07-19\",\"2020-07-20\",\"2020-07-21\",\"2020-07-22\",\"2020-07-23\",\"2020-07-24\",\"2020-07-25\",\"2020-07-26\",\"2020-07-27\",\"2020-07-28\",\"2020-07-29\",\"2020-07-30\",\"2020-07-31\",\"2020-08-01\",\"2020-08-02\",\"2020-08-03\",\"2020-08-04\",\"2020-08-05\",\"2020-08-06\",\"2020-08-07\",\"2020-08-08\",\"2020-08-09\",\"2020-08-10\",\"2020-08-11\",\"2020-08-12\",\"2020-08-13\",\"2020-08-14\",\"2020-08-15\",\"2020-08-16\",\"2020-08-17\",\"2020-08-18\",\"2020-08-19\",\"2020-08-20\",\"2020-08-21\",\"2020-08-22\",\"2020-08-23\",\"2020-08-24\",\"2020-08-25\",\"2020-08-26\",\"2020-08-27\",\"2020-08-28\",\"2020-08-29\",\"2020-08-30\",\"2020-08-31\",\"2020-09-01\",\"2020-09-02\",\"2020-09-03\",\"2020-09-04\",\"2020-09-05\",\"2020-09-06\",\"2020-09-07\",\"2020-09-08\",\"2020-09-09\",\"2020-09-10\",\"2020-09-11\",\"2020-09-12\",\"2020-09-13\",\"2020-09-14\",\"2020-09-15\",\"2020-09-16\",\"2020-09-17\",\"2020-09-18\",\"2020-09-19\",\"2020-09-20\",\"2020-09-21\",\"2020-09-22\",\"2020-09-23\",\"2020-09-24\",\"2020-09-25\",\"2020-09-26\",\"2020-09-27\",\"2020-09-28\",\"2020-09-29\",\"2020-09-30\",\"2020-10-01\",\"2020-10-02\",\"2020-10-03\",\"2020-10-04\",\"2020-10-05\",\"2020-10-06\",\"2020-10-07\",\"2020-10-08\",\"2020-10-09\",\"2020-10-10\",\"2020-10-11\",\"2020-10-12\",\"2020-10-13\",\"2020-10-14\",\"2020-10-15\",\"2020-10-16\",\"2020-10-17\",\"2020-10-18\",\"2020-10-19\",\"2020-10-20\",\"2020-10-21\",\"2020-10-22\",\"2020-10-23\",\"2020-10-24\",\"2020-10-25\",\"2020-10-26\",\"2020-10-27\",\"2020-10-28\",\"2020-10-29\",\"2020-10-30\",\"2020-10-31\",\"2020-11-01\",\"2020-11-02\",\"2020-11-03\",\"2020-11-04\",\"2020-11-05\",\"2020-11-06\",\"2020-11-07\",\"2020-11-08\",\"2020-11-09\",\"2020-11-10\",\"2020-11-11\",\"2020-11-12\",\"2020-11-13\",\"2020-11-14\",\"2020-11-15\",\"2020-11-16\",\"2020-11-17\",\"2020-11-18\",\"2020-11-19\",\"2020-11-20\",\"2020-11-21\",\"2020-11-22\",\"2020-11-23\",\"2020-11-24\",\"2020-11-25\",\"2020-11-26\",\"2020-11-27\",\"2020-11-28\",\"2020-11-29\",\"2020-11-30\",\"2020-12-01\",\"2020-12-02\",\"2020-12-03\",\"2020-12-04\",\"2020-12-05\",\"2020-12-06\",\"2020-12-07\",\"2020-12-08\",\"2020-12-09\",\"2020-12-10\",\"2020-12-11\",\"2020-12-12\",\"2020-12-13\",\"2020-12-14\",\"2020-12-15\",\"2020-12-16\",\"2020-12-17\",\"2020-12-18\",\"2020-12-19\",\"2020-12-20\",\"2020-12-21\",\"2020-12-22\",\"2020-12-23\",\"2020-12-24\",\"2020-12-25\",\"2020-12-26\",\"2020-12-27\",\"2020-12-28\",\"2020-12-29\",\"2020-12-30\",\"2020-12-31\",\"2021-01-01\",\"2021-01-02\",\"2021-01-03\",\"2021-01-04\",\"2021-01-05\",\"2021-01-06\",\"2021-01-07\",\"2021-01-08\",\"2021-01-09\",\"2021-01-10\",\"2021-01-11\",\"2021-01-12\",\"2021-01-13\",\"2021-01-14\",\"2021-01-15\",\"2021-01-16\",\"2021-01-17\",\"2021-01-18\",\"2021-01-19\",\"2021-01-20\",\"2021-01-21\",\"2021-01-22\",\"2021-01-23\",\"2021-01-24\",\"2021-01-25\",\"2021-01-26\",\"2021-01-27\",\"2021-01-28\",\"2021-01-29\",\"2021-01-30\",\"2021-01-31\",\"2021-02-01\",\"2021-02-02\",\"2021-02-03\",\"2021-02-04\",\"2021-02-05\",\"2021-02-06\",\"2021-02-07\",\"2021-02-08\",\"2021-02-09\",\"2021-02-10\",\"2021-02-11\",\"2021-02-12\",\"2021-02-13\",\"2021-02-14\",\"2021-02-15\",\"2021-02-16\",\"2021-02-17\",\"2021-02-18\",\"2021-02-19\",\"2021-02-20\",\"2021-02-21\",\"2021-02-22\",\"2021-02-23\",\"2021-02-24\",\"2021-02-25\",\"2021-02-26\",\"2021-02-27\",\"2021-02-28\",\"2021-03-01\",\"2021-03-02\",\"2021-03-03\",\"2021-03-04\",\"2021-03-05\",\"2021-03-06\",\"2021-03-07\",\"2021-03-08\",\"2021-03-09\",\"2021-03-10\",\"2021-03-11\",\"2021-03-12\",\"2021-03-13\",\"2021-03-14\",\"2021-03-15\",\"2021-03-16\",\"2021-03-17\",\"2021-03-18\",\"2021-03-19\",\"2021-03-20\",\"2021-03-21\",\"2021-03-22\",\"2021-03-23\",\"2021-03-24\",\"2021-03-25\",\"2021-03-26\",\"2021-03-27\",\"2021-03-28\",\"2021-03-29\",\"2021-03-30\",\"2021-03-31\",\"2021-04-01\",\"2021-04-02\",\"2021-04-03\",\"2021-04-04\",\"2021-04-05\",\"2021-04-06\",\"2021-04-07\",\"2021-04-08\",\"2021-04-09\",\"2021-04-10\",\"2021-04-11\",\"2021-04-12\",\"2021-04-13\",\"2021-04-14\",\"2021-04-15\",\"2021-04-16\",\"2021-04-17\",\"2021-04-18\",\"2021-04-19\",\"2021-04-20\",\"2021-04-21\",\"2021-04-22\",\"2021-04-23\",\"2021-04-24\",\"2021-04-25\",\"2021-04-26\",\"2021-04-27\",\"2021-04-28\",\"2021-04-29\",\"2021-04-30\",\"2021-05-01\",\"2021-05-02\",\"2021-05-03\",\"2021-05-04\",\"2021-05-05\",\"2021-05-06\",\"2021-05-07\",\"2021-05-08\",\"2021-05-09\",\"2021-05-10\",\"2021-05-11\",\"2021-05-12\",\"2021-05-13\",\"2021-05-14\",\"2021-05-15\",\"2021-05-16\",\"2021-05-17\",\"2021-05-18\",\"2021-05-19\",\"2021-05-20\",\"2021-05-21\",\"2021-05-22\",\"2021-05-23\",\"2021-05-24\",\"2021-05-25\",\"2021-05-26\",\"2021-05-27\",\"2021-05-28\",\"2021-05-29\",\"2021-05-30\",\"2021-05-31\",\"2021-06-01\",\"2021-06-02\",\"2021-06-03\",\"2021-06-04\",\"2021-06-05\",\"2021-06-06\",\"2021-06-07\",\"2021-06-08\",\"2021-06-09\",\"2021-06-10\",\"2021-06-11\",\"2021-06-12\",\"2021-06-13\",\"2021-06-14\",\"2021-06-15\",\"2021-06-16\",\"2021-06-17\",\"2021-06-18\",\"2021-06-19\",\"2021-06-20\",\"2021-06-21\",\"2021-06-22\",\"2021-06-23\",\"2021-06-24\",\"2021-06-25\",\"2021-06-26\",\"2021-06-27\",\"2021-06-28\",\"2021-06-29\",\"2021-06-30\",\"2021-07-01\",\"2021-07-02\",\"2021-07-03\",\"2021-07-04\",\"2021-07-05\",\"2021-07-06\",\"2021-07-07\",\"2021-07-08\",\"2021-07-09\",\"2021-07-10\",\"2021-07-11\",\"2021-07-12\",\"2021-07-13\",\"2021-07-14\",\"2021-07-15\",\"2021-07-16\",\"2021-07-17\",\"2021-07-18\",\"2021-07-19\",\"2021-07-20\",\"2021-07-21\",\"2021-07-22\",\"2021-07-23\",\"2021-07-24\",\"2021-07-25\",\"2021-07-26\",\"2021-07-27\",\"2021-07-28\",\"2021-07-29\",\"2021-07-30\",\"2021-07-31\",\"2021-08-01\",\"2021-08-02\",\"2021-08-03\",\"2021-08-04\",\"2021-08-05\",\"2021-08-06\",\"2021-08-07\",\"2021-08-08\",\"2021-08-09\",\"2021-08-10\",\"2021-08-11\",\"2021-08-12\",\"2021-08-13\",\"2021-08-14\",\"2021-08-15\",\"2021-08-16\",\"2021-08-17\",\"2021-08-18\",\"2021-08-19\",\"2021-08-20\",\"2021-08-21\",\"2021-08-22\",\"2021-08-23\",\"2021-08-24\",\"2021-08-25\",\"2021-08-26\",\"2021-08-27\",\"2021-08-28\",\"2021-08-29\",\"2021-08-30\",\"2021-08-31\",\"2021-09-01\",\"2021-09-02\",\"2021-09-03\",\"2021-09-04\",\"2021-09-05\",\"2021-09-06\",\"2021-09-07\",\"2021-09-08\",\"2021-09-09\",\"2021-09-10\",\"2021-09-11\",\"2021-09-12\",\"2021-09-13\",\"2021-09-14\"],\"y\":[0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,4,4,4,4,4,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,8,8,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,15,15,16,16,17,18,18,19,23,23,24,25,26,28,30,31,36,40,42,47,54,62,66,68,71,80,87,98,104,115,125,133,140,150,154,162,171,181,191,200,218,228,235,244,255,263,272,281,291,294,304,314,321,333,340,348,355,362,376,386,397,407,418,429,436,443,453,460,469,478,491,510,531,543,567,583,590,605,621,633,649,666,686,706,727,745,760,781,795,812,828,847,861,880,904,917,930,950,971,987,1004,1024,1040,1055,1076,1090,1108,1124,1134,1159,1168,1183,1194,1204,1222,1236,1251,1265,1282,1298,1312,1329,1340,1357,1371,1385,1396,1404,1419,1431,1444,1453,1464,1476,1491,1502,1513,1527,1537,1546,1555,1566,1578,1588,1599,1608,1624,1634,1641,1662,1674,1679,1690,1700,1715,1726,1731,1739,1757,1773,1793,1810,1825,1846,1864,1882,1895,1913,1921,1936,1956,1967,1980,1996,2011,2023,2037,2051,2065,2086,2103,2117,2134,2144,2156,2171,2185,2193,2205,2218,2229,2248,2267,2286,2305,2322,2338,2353,2367,2384,2401,2416,2433,2449,2458,2477,2492,2506,2518,2532,2543,2558,2567,2584,2599,2604,2612,2627,2634,2641,2650,2662,2672,2680,2687,2692,2698,2701,2710,2714,2719,2723,2730,2737,2745,2756,2763,2771,2777,2782,2785,2793,2796,2800,2803,2806,2812,2820,2824,2829,2833,2835,2838,2841,2848,2852,2859,2862,2867,2875,2881,2886,2891,2894,2896,2897,2900,2904,2908,2914,2923,2931,2936,2942,2949,2957,2965,2970,2974,2981,2983,2992,3000,3004,3011,3018,3024,3030,3036,3044,3054,3065,3071,3084,3091,3099,3104,3115,3125,3136,3143,3158,3168,3186,3202,3217,3231,3254,3266,3290,3310,3326,3341,3365,3386,3409,3430,3456,3482,3514,3547,3571,3593,3625,3673,3696,3736,3765,3797,3820,3849,3877,3908,3929,3962,3993,4022,4041,4074,4098,4124,4153,4175,4205,4228,4251,4278,4298,4322,4346,4369,4388,4407,4437,4459,4473,4490,4506,4530,4546,4567,4581,4602,4614,4629,4648,4661,4667,4674,4686,4703,4718,4726,4740,4753,4760,4773,4786,4794,4812,4829,4842,4857,4874,4880,4895,4906,4915,4925,4933,4941,4949,4966,4981,4987,4997,5013,5030,5042,5048,5059,5070,5087,5108,5124,5136,5144,5162,5169,5185,5199,5211,5225,5236,5255,5269,5284,5296,5312,5330,5342,5361,5378,5394,5417,5431,5457,5471,5492,5506,5523,5540,5568,5593,5618,5642,5673,5702,5721,5754,5780,5805,5832,5851],\"mode\":\"lines\",\"line\":{\"color\":\"violet\"},\"name\":\"Fallecidos\",\"type\":\"scatter\",\"marker\":{\"color\":\"rgba(214,39,40,1)\",\"line\":{\"color\":\"rgba(214,39,40,1)\"}},\"error_y\":{\"color\":\"rgba(214,39,40,1)\"},\"error_x\":{\"color\":\"rgba(214,39,40,1)\"},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null}],\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.2,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}\r\n Ejercicio:\r\na. Modifique el gráfico anterior y muestre las etiquetas de los controles en español.\r\nGráficos de barras\r\nLos gráficos de barras (barcharts o barplots) muestran la relación entre una variable categórica y una variable numérica. Cada entidad de la variable categórica es representada mediante una barra, en la que su altura representa el valor correspondiente de la variable numérica.\r\nPara algunos ejemplos de esta sección, se utilizará el conjunto de datos de casos de covid de Centroamérica. Para facilitar su visualización, se ordenan los registros de acuerdo con la columna de casos confirmados, mediante la función order().\r\n\r\n\r\n# Ordenar de mayor a menor\r\nca_positivos.ordenado <- order(ca_covid19$positivos, decreasing=TRUE)\r\n\r\n# Nuevo data frame ordenado\r\nca_covid19.positivos <- ca_covid19[ca_positivos.ordenado,]\r\n\r\n\r\n\r\ngraphics\r\nLa función barplot(), del paquete graphics, se utiliza en el siguiente ejemplo para generar un gráfico de barras de los casos confirmados.\r\nBarras simples\r\n\r\n\r\nbarplot(\r\n  height=ca_covid19.positivos$positivos, \r\n  names.arg=ca_covid19.positivos$pais, \r\n  xlab=\"País\", \r\n  ylab=\"Casos positivos\", \r\n  main=\"Casos positivos de covid en Centroamérica\"\r\n)\r\n\r\n\r\n\r\n\r\nCantidad de registros de mamíferos por año\r\n\r\n\r\n# Generación de un nuevo data frame\r\nregistros_agrupados_x_anyo <-\r\n  registros_mammalia_cr %>%\r\n  dplyr::count(year)\r\n\r\n# Gráfico de barras verticales\r\nbarplot(\r\n  registros_agrupados_x_anyo$n, \r\n  names.arg = registros_agrupados_x_anyo$year,\r\n  main = \"Cantidad de registros de mamíferos por año\",\r\n)\r\n\r\n\r\n\r\n# Gráfico de barras horizontales\r\nbarplot(\r\n  registros_agrupados_x_anyo$n, \r\n  names.arg = registros_agrupados_x_anyo$year,\r\n  main = \"Cantidad de registros de mamíferos por año\",\r\n  horiz = TRUE,\r\n  las=1\r\n)\r\n\r\n\r\n\r\n\r\nCantidad de registros de mamíferos por orden taxonómico\r\n\r\n\r\n# Generación de un nuevo data frame\r\nregistros_agrupados_x_orden <-\r\n  registros_mammalia_cr %>%\r\n  dplyr::count(order)\r\n\r\n# Gráfico de barras verticales\r\nbarplot(\r\n  registros_agrupados_x_orden$n, \r\n  names.arg = registros_agrupados_x_orden$order,\r\n  main = \"Cantidad de registros por orden taxonómico de mamíferos\",\r\n)\r\n\r\n\r\n\r\n# Gráfico de barras horizontales\r\npar(mai=c(1, 2, 1, 1))\r\nbarplot(\r\n  registros_agrupados_x_orden$n, \r\n  names.arg = registros_agrupados_x_orden$order,\r\n  main = \"Cantidad de registros por orden taxonómico de mamíferos\",\r\n  horiz = TRUE,\r\n  las=1\r\n)\r\n\r\n\r\n\r\n\r\nCantidad de registros de carnívoros por familia taxonómica\r\n\r\n\r\n# Generación de un nuevo data frame\r\nregistros_carnivora_agrupados_x_familia <-\r\n  registros_mammalia_cr %>%\r\n  filter(order == \"Carnivora\") %>%\r\n  dplyr::count(family)\r\n\r\n# Gráfico de barras horizontales\r\npar(mai=c(1, 2, 1, 1))\r\nbarplot(\r\n  registros_carnivora_agrupados_x_familia$n, \r\n  names.arg = registros_carnivora_agrupados_x_familia$family,\r\n  main = \"Cantidad de registros por familia de carnívoros\",\r\n  horiz = TRUE,\r\n  las=1\r\n)\r\n\r\n\r\n\r\n\r\nCantidad de registros de felinos por especie\r\n\r\n\r\n# Generación de un nuevo data frame\r\nregistros_felidae_agrupados_x_especie <-\r\n  registros_mammalia_cr %>%\r\n  filter(family == \"Felidae\") %>%\r\n  dplyr::count(species)\r\n\r\n# Gráfico de barras horizontales\r\npar(mai=c(1, 2, 1, 1))\r\nbarplot(\r\n  registros_felidae_agrupados_x_especie$n, \r\n  names.arg = registros_felidae_agrupados_x_especie$species,\r\n  main = \"Cantidad de registros por especie de felinos\",\r\n  horiz = TRUE,\r\n  las=1\r\n)\r\n\r\n\r\n\r\n\r\nEjercicio:\r\nHaga un gráfico de barras que muestre la cantidad de registros por especie de felinos o de caninos.\r\nggplot2\r\nLa función geom_col(), en combinación con ggplot(), puede utilizarse para generar gráficos de barras.\r\n\r\n\r\nggplot(ca_covid19, aes(x=reorder(pais, -positivos), y=positivos)) +\r\n  ggtitle(\"Casos positivos de covid en Centroamérica\") +\r\n  xlab(\"País\") + \r\n  ylab(\"Casos positivos\") +  \r\n  geom_col() +\r\n  geom_text(aes(label=positivos), vjust=-0.3, size=3.5)\r\n\r\n\r\n\r\n\r\nNote el uso de la función reorder() en el ejemplo anterior, para ordenar el orden de las barras (i.e. los países) en el eje X y el de geom_text() para desplegar etiquetas sobre las barras.\r\nBarras apiladas\r\nCantidad de registros de felinos por especie y tipo de registro (basis or record)\r\n\r\n\r\n# Generación de un nuevo data frame\r\nregistros_felidae_agrupados_x_especie_tiporegistro <-\r\n  registros_mammalia_cr %>%\r\n  filter(family == \"Felidae\") %>%\r\n  dplyr::count(species, basisOfRecord)\r\n\r\n# Gráfico de barras apiladas\r\nggplot(\r\n  registros_felidae_agrupados_x_especie_tiporegistro, \r\n  aes(x = species, y = n, fill = basisOfRecord)\r\n) +\r\n  geom_col() +\r\n  coord_flip()\r\n\r\n\r\n\r\n\r\nBarras agrupadas\r\nCantidad de registros de felinos por especie y tipo de registro (basis or record)\r\n\r\n\r\n# Gráfico de barras apiladas\r\nggplot(\r\n  registros_felidae_agrupados_x_especie_tiporegistro, \r\n  aes(x = species, y = n, fill = basisOfRecord)\r\n) +\r\n  geom_col(position = \"dodge\") +\r\n  coord_flip()\r\n\r\n\r\n\r\n\r\nEjercicio:\r\nPara los dos últimos gráficos:\r\n- Ordene las barras por tamaño, de mayor a menor.\r\n- Coloque las etiquetas de cantidades (n) al final de cada barra.\r\n- Agregue títulos para los gráficos y para los ejes x e y.\r\n\r\n\r\n\r\n",
      "last_modified": "2021-09-15T11:59:26-06:00"
    },
    {
      "path": "tarea-01-rmarkdown.html",
      "title": "Tarea 01 - R Markdown",
      "author": [],
      "contents": "\r\n\r\nContents\r\nFecha de entrega y entregables\r\nCalificación\r\n\r\nFecha de entrega y entregables\r\nLa fecha y hora límite para la entrega de esta tarea es el miércoles 8 de setiembre de 2021 a las 16:59.\r\nDebe entregar un sitio web publicado en Netlify y desarrollado con blogdown y Hugo Academic Resumé Template.\r\nLa tarea debe realizarse de manera individual.\r\nCalificación\r\nEntre paréntesis, se muestra el porcentaje correspondiente a cada aspecto que se calificará:\r\n(25%) Modificación de la sección de biografía.\r\n(25%) Adición de un artículo (post) personalizado.\r\n(25%) Modificación de la sección de proyectos.\r\n(25%) Modificación de la sección de contacto.\r\n\r\n\r\n\r\n",
      "last_modified": "2021-09-01T19:38:37-06:00"
    }
  ],
  "collections": []
}
