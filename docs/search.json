{
  "articles": [
    {
      "path": "about.html",
      "title": "About this site",
      "description": "Some additional details about the website",
      "author": [],
      "contents": "\r\n\r\n\r\n\r\n",
      "last_modified": "2021-08-11T00:36:16-06:00"
    },
    {
      "path": "index.html",
      "title": "TPB728O Programación de aplicaciones geoespaciales en R 2021-II",
      "description": "Curso TPB728O Programación de aplicaciones geoespaciales en R. Maestría en Sistemas de Información Geográfica y Teledetección. Universidad de Costa Rica (UCR) y Universidad Nacional (UNA).\n",
      "author": [
        {
          "name": "Manuel Vargas",
          "url": "https://github.com/mfvargas"
        }
      ],
      "contents": "\r\n\r\nContents\r\nDescripción\r\nPrograma\r\nLecciones\r\nRecursos\r\n\r\nDescripción\r\nEste es un curso sobre desarrollo de aplicaciones geoespaciales en el lenguaje de programación R. Forma parte de la Maestría en Sistemas de Información Geográfica y Teledetección de la Universidad de Costa Rica (UCR) y de la Universidad Nacional (UNA).\r\nSe estudian los fundamentos del lenguaje R, sus bibliotecas geoespaciales y sus capacidades para generar gráficos estadísticos. El enfoque del curso es teórico-práctico, con lecciones teóricas combinadas con ejercicios de programación en los cuales los estudiantes aplicarán en diversos escenarios de procesamiento de datos los conocimientos adquiridos.\r\nEste sitio web corresponde al curso impartido durante el segundo ciclo lectivo de 2021. Para ver las versiones de otros ciclos lectivos, puede visitar el sitio web general del curso.\r\nPrograma\r\nPrograma del curso\r\nLecciones\r\n01 R - Conceptos básicos\r\nRecursos\r\nRecursos adicionales a la bibliografía del curso\r\n\r\n\r\n\r\n",
      "last_modified": "2021-08-11T11:35:37-06:00"
    },
    {
      "path": "leccion-01-r-conceptosbasicos.html",
      "title": "R - Conceptos básicos",
      "author": [],
      "contents": "\r\n\r\nContents\r\nResumen\r\nTrabajo previo\r\nCaracterísticas generales de R\r\nEl ambiente de desarrollo RStudio\r\nFunciones\r\nEjemplos\r\nArgumentos\r\nAyuda\r\nConjuntos de datos para pruebas\r\n\r\nPaquetes\r\nTipos de datos\r\nTipos básicos\r\nNúmeros\r\nCaracteres\r\nLógicos\r\nVectores\r\nDefinición\r\nIndexación\r\nOperaciones\r\n\r\nMatrices\r\nDefinición\r\nIndexación\r\nOperaciones\r\n\r\n\r\nTipos compuestos\r\nFactores\r\nDefinición\r\nOperaciones\r\n\r\nData Frames\r\nDefinición\r\nIndexación\r\nOperaciones\r\n\r\n\r\nOtros\r\nFechas\r\nOperaciones\r\n\r\n\r\n\r\n\r\nResumen\r\nEn esta lección, se estudiarán los conceptos básicos del lenguaje de programación R, incluyendo:\r\nCaracterísticas generales de R.\r\nEl ambiente de desarrollo RStudio.\r\nFunciones y paquetes.\r\nTipos de datos.\r\nTrabajo previo\r\nInstale R y RStudio en su computadora. Puede aceptar las opciones que los programas instaladores le presentan por defecto. Si lo desea, puede ver los siguientes videos que muestran detalladamente el proceso de instalación en los sistemas operativos Windows, macOS y Linux (Ubuntu).\r\nInstale el sistema para control de versiones Git.\r\nLea los capítulos del 1 al 12 de Grolemund, G., & Wickham, H. (2014). Hands-On Programming with R.\r\nCaracterísticas generales de R\r\nR es un lenguaje de programación enfocado en análisis estadístico. Es ampliamente utilizado en diversas áreas de investigación, entre las que pueden mencionarse aprendizaje automático (machine learning), ciencia de datos (data science) y big data, con aplicaciones en campos como biomedicina, bioinformática y finanzas, entre muchos otros. Fue creado por Ross Ihaka y Robert Gentleman en la Universidad de Auckland, Nueva Zelanda, en 1993.\r\nAlgunas de las principales características de este lenguaje son:\r\nEs interpretado: las instrucciones se traducen una por una a lenguaje máquina, a diferencia de los lenguajes compilados, que traducen de manera conjunta las instrucciones de una unidad completa (ej. un programa o una biblioteca). Los lenguajes interpretados tienden a ser más lentos que los compilados, pero también son más flexibles.\r\nEs multiplataforma: puede ejecutarse en los sistemas operativos más populares (ej. Microsoft Windows, macOS, Linux).\r\nTiene un sistema de tipos de datos dinámico: las variables pueden tomar diferentes tipos de datos (ej. textuales, numéricos) durante la ejecución del programa, a diferencia del caso de un sistema de tipos de datos estático, en el que las variables solo pueden tener un tipo de datos.\r\nSoporta varios paradigmas de programación: los paradigmas son estilos o enfoques teóricos de programación. R soporta los paradigmas de programación funcional, programación orientada a objetos, programación imperativa y programación procedimental.\r\nR es un proyecto de software libre que se comparte mediante una licencia GNU General Public Licence (GNU GPL). Esta característica permite que la funcionalidad original de R pueda ser ampliada mediante bibliotecas o paquetes desarrollados por la comunidad de programadores.\r\nPara programar en R, puede utilizarse una interfaz de línea de comandos y también ambientes de desarrollo integrados (IDE, integrated development environment) como Jupyter o RStudio.\r\nEl ambiente de desarrollo RStudio\r\nRStudio es el IDE más popular para el lenguaje R. Está disponible en una versión de escritorio (RStudio Desktop) y en una versión para servidor (RStudio Server). Esta última permite la conexión de varios usuarios a través de un navegador web. RStudio se ofrece también como un servicio en la nube, a través de RStudio Cloud.\r\n\r\nInterfaz de RStudio.\r\nAdemás de edición de código fuente en R (y otros lenguajes), RStudio contiene capacidades para depurar código y visualizar datos en formatos tabulares, gráficos y de mapas.\r\nFunciones\r\nR, al igual que otros lenguajes de programación, estructura su funcionalidad en unidades de código fuente llamadas funciones. Cada función realiza una tarea específica como, por ejemplo, un cálculo matemático y, por lo general, retorna un valor como salida. Todas las funciones tienen un nombre y, opcionalmente, un conjunto de argumentos que especifican los datos de entrada que procesa la función. Los argumentos se escriben entre paréntesis redondos (()) y estos siempre deben incluirse, aún en el caso de que la función no tenga ningún argumento. Si la función tiene varios argumentos, deben separarse mediante comas (,).\r\nEjemplos\r\nLa función print() recibe como argumento un valor (ej. un texto o un número) para imprimirlo en la pantalla. En el siguiente fragmento de código en R, se utiliza print() para imprimir la hilera “Hola mundo”. Nótese el uso del símbolo # para comentarios (i.e. texto que no es código ejecutable).\r\n\r\n\r\n# Impresión de una hilera de caracteres\r\nprint(\"Hola mundo\")\r\n\r\n\r\n[1] \"Hola mundo\"\r\n\r\nLa función mean() retorna la media aritmética del argumento de entrada. En el siguiente ejemplo, se calcula la media de los números de un vector creado a su vez con la función c().\r\n\r\n\r\n# Media aritmética\r\nmean(c(2, 4, 5, 9))\r\n\r\n\r\n[1] 5\r\n\r\nLa función getwd() (get working directory) retorna la ruta del directorio de trabajo de la sesión actual de R. Este es el directorio en el cual R espera encontrar, por ejemplo, archivos de datos.\r\n\r\n\r\n# Impresión del directorio de trabajo\r\ngetwd()\r\n\r\n\r\n[1] \"C:/Users/mfvargas/tpb728O-programaciongeoespacialr/2021ii\"\r\n\r\nLa función setwd() (set working directory) establece la ruta del directorio de trabajo de la sesión actual de R. Como argumento, recibe una hilera de texto con la ruta.\r\nNote las barras utilizadas para separar los subdirectorios: / (no \\)\r\n\r\n\r\n# Definición del directorio de trabajo (la ruta debe existir)\r\nsetwd(\"C:/Users/mfvargas\")\r\n\r\n# Directorio con espacios, tildes y eñes\r\nsetwd(\"C:/Users/mfvargas/mi directorio con espacios y tildes áéíóúñ\")\r\n\r\n\r\n\r\n Ejercicio:\r\na. Obtenga la ruta de su directorio de trabajo con la función getwd().\r\nb. Si lo desea, cambie la ruta de su directorio de trabajo con la función setwd(). Verifique el cambio con getwd().\r\nArgumentos\r\nLos argumentos de las funciones tienen nombres que pueden especificarse, en caso de ser necesario. En algunos casos, el orden y el tipo de datos de los argumentos permiten que el interpretador de R conozca cuál es cada uno.\r\nEn el siguiente ejemplo, se utilizan los argumentos x, xlab y ylab de la función plot() para especificar la fuente de datos y las etiquetas de los ejes x e y de un gráfico de dispersión.\r\n\r\n\r\n# Gráfico de dispersón del conjunto de datos \"cars\" con etiquetas en los ejes x e y\r\nplot(\r\n  x=cars, \r\n  xlab=\"Velocidad (mph)\", \r\n  ylab=\"Distancia requerida para frenar (pies)\"\r\n)\r\n\r\n\r\n\r\n\r\n Ejercicio: estudie la documentación de la función plot() y agregue al gráfico anterior:\r\na. Un título.\r\nb. Un subtítulo.\r\nAyuda\r\nPara obtener ayuda de una función desde la línea de comandos de R, puede utilizarse un signo de pregunta (?) seguido del nombre de la función o bien la función help(). Por ejemplo:\r\n\r\n\r\n# Ayuda de la función setwd()\r\n?setwd\r\nhelp(setwd)\r\n\r\n\r\n\r\nAdicionalmente, puede utilizarse la función apropos() para buscar funciones por palabras clave.\r\n\r\n\r\n# Búsqueda, por palabras clave, de funciones relacionadas con \"mean\" (media aritmética). Note las comillas (\"\").\r\napropos(\"mean\")\r\n\r\n\r\n [1] \".colMeans\"     \".rowMeans\"     \"colMeans\"      \"kmeans\"       \r\n [5] \"mean\"          \"mean.Date\"     \"mean.default\"  \"mean.difftime\"\r\n [9] \"mean.POSIXct\"  \"mean.POSIXlt\"  \"rowMeans\"      \"weighted.mean\"\r\n\r\nLa función example() presenta ejemplos sobre el uso de una función.\r\n\r\n\r\n# Ejemplos de uso de la función mean()\r\nexample(\"mean\")\r\n\r\n\r\n\r\nmean> x <- c(0:10, 50)\r\n\r\nmean> xm <- mean(x)\r\n\r\nmean> c(xm, mean(x, trim = 0.10))\r\n[1] 8.75 5.50\r\n\r\nPor otra parte, el sitio All R Documentation reúne documentación de funciones de una gran cantidad de paquetes de R. También puede obtenerse ayuda sobre una función en los buscadores de Internet (ej. Google), además de ejemplos, tutoriales y otros materiales de apoyo.\r\nConjuntos de datos para pruebas\r\nPara efectos de pruebas y ejemplos, la distribución base de R incorpora varios conjuntos de datos que pueden listarse con la función data(). Para obtener información acerca de un conjunto de datos en particular, puede utilizarse el operador ?.\r\n\r\n\r\n# Información sobre todos los conjuntos de datos incorporados en la distribución base de R\r\ndata()\r\n\r\n# Información sobre el cojunto de datos \"cars\"\r\n?cars\r\n\r\n# Información sobre el cojunto de datos \"Iris\"\r\n?iris\r\n\r\n\r\n\r\nPaquetes\r\nLas funciones de R se distribuyen mediante paquetes. Cada paquete contiene un conjunto de funciones y estructuras de datos relacionadas entre sí. Para utilizar un paquete, primero debe cargarse (en la memoria del computador) con la función library().\r\n\r\n\r\n# Carga del paquete stats\r\nlibrary(stats)\r\n\r\n\r\n\r\nAlgunos paquetes están contenidos en la distribución base de R y otros deben instalarse de manera separada con la función install.packages().\r\nEn el siguiente ejemplo, se instala el paquete PASWR2, el cual contiene el conjunto de datos TITANIC3.\r\n\r\n\r\n# Instalación del paquete PASWR2 (note las comillas)\r\ninstall.packages(\"PASWR2\")\r\n\r\n\r\n\r\nEl paquete PASWR2 se carga con library().\r\n\r\n\r\n# Carga de PASWR2\r\nlibrary(PASWR2)\r\n\r\n\r\n\r\nEl conjunto de datos TITANIC3 puede visualizarse con la función View().\r\n\r\n\r\n# Visualización del conjunto de datos TITANIC3\r\nView(TITANIC3)\r\n\r\n\r\n\r\nPara visualizar gráficamente el conjunto de datos, el siguiente gráfico de barras muestra la distribución de pasajeros por clase.\r\n\r\n\r\n# Cantidades de pasajeros por clase\r\ntable(TITANIC3$pclass)\r\n\r\n\r\n\r\n1st 2nd 3rd \r\n323 277 709 \r\n\r\n\r\n# Gráfico de barras por clase de pasajero\r\nbarplot(\r\n  height=table(TITANIC3$pclass),\r\n  main=\"Distribución de pasajeros del Titanic por clase\",\r\n  xlab = \"Clase\",\r\n  ylab = \"Cantidad de pasajeros\"  \r\n)\r\n\r\n\r\n\r\n\r\nLa distribución por cada clase puede dividirse en fallecidos y sobrevivientes.\r\n\r\n\r\n# Cantidades de pasajeros fallecidos y sobrevivientes por clase\r\n# (0 corresponde a fallecidos y 1 a sobrevivientes)\r\ntable(TITANIC3$survived, TITANIC3$pclass)\r\n\r\n\r\n   \r\n    1st 2nd 3rd\r\n  0 123 158 528\r\n  1 200 119 181\r\n\r\nEl siguiente gráfico muestra en un gráfico de barras apiladas la distribución de pasajeros sobrevivientes y fallecidos en cada clase.\r\n\r\n\r\n# Gráfico de barras apiladas\r\nbarplot(\r\n  height = table(TITANIC3$survived, TITANIC3$pclass),\r\n  main = \"Distribución de pasajeros fallecidos y sobrevivientes por clase\",\r\n  xlab = \"Clase\",\r\n  ylab = \"Cantidad de pasajeros\",\r\n  col = topo.colors(2)\r\n)\r\n\r\n# Leyenda\r\nlegend(\r\n  x = \"topleft\",\r\n  inset = 0.03,\r\n  legend = c(\"Fallecidos\", \"Sobrevivientes\"),\r\n  fill = topo.colors(2),\r\n  horiz = TRUE\r\n)\r\n\r\n\r\n\r\n\r\nLa misma información se muestra seguidamente en un gráfico de barras agrupadas.\r\n\r\n\r\n# Gráfico de barras agrupadas\r\nbarplot(\r\n  height = table(TITANIC3$survived, TITANIC3$pclass),\r\n  main = \"Distribución de pasajeros fallecidos y sobrevivientes por clase\",\r\n  xlab = \"Clase\",\r\n  ylab = \"Cantidad de pasajeros\",  \r\n  col = topo.colors(2),\r\n  beside = TRUE\r\n)\r\n\r\n# Leyenda\r\nlegend(\r\n  x = \"topleft\",\r\n  inset = 0.03,\r\n  legend = c(\"Fallecidos\", \"Sobrevivientes\"),\r\n  fill = topo.colors(2),\r\n  horiz = TRUE\r\n)\r\n\r\n\r\n\r\n\r\n Ejercicio:\r\na. Muestre la distribución de pasajeros fallecidos y sobrevivientes por sexo en un gráfico de barras apiladas.\r\nb. Muestre la distribución de pasajeros fallecidos y sobrevivientes por sexo en un gráfico de barras agrupadas.\r\nTipos de datos\r\nR puede trabajar con varios tipos de datos básicos, entre los que están números, caracteres (i.e. textos) y lógicos. También puede trabajar con tipos compuestos, como factores y data frames.\r\nR proporciona acceso a los datos a través de objetos. Un objeto es una entidad que tiene asociadas propiedades (i.e. datos) y métodos (i.e. funciones) para manipular esas propiedades. Un objeto puede ser, por ejemplo, un número, una hilera de texto, un vector o una matriz.\r\nHay muchas formas de crear objetos en R. Una de las más sencillas es con los operadores de asignación. Estos son = y <- (o ->). Por ejemplo, las siguientes sentencias crean un número, un texto y un vector.\r\n\r\n\r\n# Número\r\nx <- 10\r\nx\r\n\r\n\r\n[1] 10\r\n\r\n\r\n# Otro número\r\n20 -> y\r\ny\r\n\r\n\r\n[1] 20\r\n\r\n\r\n# Hilera de caracteres\r\nnombre <- 'Manuel'\r\nnombre\r\n\r\n\r\n[1] \"Manuel\"\r\n\r\n\r\n# Vector de hileras de caracteres\r\ndias <- c('Domingo', 'Lunes', 'Martes', 'Miércoles', 'Jueves', 'Viernes', 'Sábado')\r\ndias\r\n\r\n\r\n[1] \"Domingo\"   \"Lunes\"     \"Martes\"    \"Miércoles\" \"Jueves\"   \r\n[6] \"Viernes\"   \"Sábado\"   \r\n\r\nTanto x, como nombre como dias son variables. Una variable es una etiqueta que se le asigna a un objeto. Una variable debe comenzar con una letra.\r\nEl tipo de una variable puede consultarse con la función typeof(). Por ejemplo:\r\n\r\n\r\ntypeof(x)\r\n\r\n\r\n[1] \"double\"\r\n\r\ntypeof(y)\r\n\r\n\r\n[1] \"double\"\r\n\r\ntypeof(nombre)\r\n\r\n\r\n[1] \"character\"\r\n\r\ntypeof(dias)\r\n\r\n\r\n[1] \"character\"\r\n\r\nA continuación, se describen con más detalle algunos de los tipos de datos utilizados en el lenguaje R.\r\nTipos básicos\r\nR define seis tipos de datos básicos. En esta sección, se describen los más utilizados durante este curso.\r\nNúmeros\r\nPueden ser enteros (integer) o decimales (double). Se utilizan en diversos tipos de operaciones, incluyendo las aritméticas (ej. suma, resta, multiplicación, división).\r\n\r\n\r\n# Declaración de variables numéricas\r\nx <- 5\r\ny <- 0.5\r\n\r\n# Suma\r\nx + y\r\n\r\n\r\n[1] 5.5\r\n\r\n\r\n# Tipos de datos numéricos\r\ntypeof(x)\r\n\r\n\r\n[1] \"double\"\r\n\r\ntypeof(y)\r\n\r\n\r\n[1] \"double\"\r\n\r\ntypeof(x + y)\r\n\r\n\r\n[1] \"double\"\r\n\r\nPara declarar números enteros puede usarse el sufijo L o la función as.integer().\r\n\r\n\r\n# Números enteros\r\nx <- 10L\r\ny <- as.integer(15)\r\n\r\n# Multiplicación\r\nx * y\r\n\r\n\r\n[1] 150\r\n\r\n\r\n# Tipos de datos enteros\r\ntypeof(x)\r\n\r\n\r\n[1] \"integer\"\r\n\r\ntypeof(y)\r\n\r\n\r\n[1] \"integer\"\r\n\r\ntypeof(x * y)\r\n\r\n\r\n[1] \"integer\"\r\n\r\nNótese que al declararse una variable numérica, ya sea que tenga o no punto decimal, R la considera por defecto de tipo double. Para que se considere de tipo integer, debe utilizarse el sufijo L o la función as.integer().\r\nCaracteres\r\nSe utilizan para representar textos. Deben estar encerrados entre comillas simples ('') o dobles (\"\").\r\n\r\n\r\n# Hileras de caracteres\r\nnombre <- \"María\"\r\napellido <- \"Pérez\"\r\n\r\n# Concatenación mediante la función paste()\r\npaste(nombre, apellido)\r\n\r\n\r\n[1] \"María Pérez\"\r\n\r\nLógicos\r\nLos objetos lógicos (también llamados booleanos) tienen dos posibles valores: verdadero (TRUE) o falso (FALSE).\r\n\r\n\r\n# Variable lógica\r\na <- 1 < 2\r\na\r\n\r\n\r\n[1] TRUE\r\n\r\n\r\n# Variable lógica\r\nb <- 1 > 2\r\nb\r\n\r\n\r\n[1] FALSE\r\n\r\nLas expresiones lógicas pueden combinarse con operadores como:\r\n& (Y, en inglés AND)\r\n| (O, en inglés OR)\r\n! (NO, en inglés NOT)\r\n\r\n\r\n# Operador lógico AND\r\n(1 < 2) & (3 < 4)\r\n\r\n\r\n[1] TRUE\r\n\r\n\r\n# Operador lógico OR\r\n(2 + 2 == 5) | (20 <= 10)\r\n\r\n\r\n[1] FALSE\r\n\r\n\r\n# Operador lógico NOT\r\n!(2 + 2 == 5)\r\n\r\n\r\n[1] TRUE\r\n\r\nVectores\r\nUn vector es una estructura unidimensional que combina objetos del mismo tipo.\r\nDefinición\r\nLos vectores pueden definirse de varias formas como, por ejemplo, con la función c() (del inglés combine):\r\n\r\n\r\n# Definición de un vector de números\r\nvector_numeros <- c(1, 7, 32, 45, 57)\r\nvector_numeros\r\n\r\n\r\n[1]  1  7 32 45 57\r\n\r\n\r\n# Definición de un vector de hileras de caracteres\r\nvector_nombres <- c(\"Álvaro\", \"Ana\", \"Berta\", \"Bernardo\")\r\nvector_nombres\r\n\r\n\r\n[1] \"Álvaro\"   \"Ana\"      \"Berta\"    \"Bernardo\"\r\n\r\nLos vectores también pueden crearse con el operador :, el cual especifica una secuencia:\r\n\r\n\r\n# Definición de un vector de números con la secuencia de 1 a 10\r\nvector_secuencia <- 1:10\r\nvector_secuencia\r\n\r\n\r\n [1]  1  2  3  4  5  6  7  8  9 10\r\n\r\n\r\n# Definición de un vector de números con la secuencia de -5 a 5\r\nvector_secuencia <- -5:5\r\nvector_secuencia\r\n\r\n\r\n [1] -5 -4 -3 -2 -1  0  1  2  3  4  5\r\n\r\n\r\n# Definición de un vector de números con la secuencia de -0.5 a 3.7\r\nvector_secuencia <- -0.5:3.7\r\nvector_secuencia\r\n\r\n\r\n[1] -0.5  0.5  1.5  2.5  3.5\r\n\r\nLa función seq() también crea un vector con base en una secuencia y permite especificar argumentos como un valor de incremento y la longitud de la secuencia.\r\n\r\n\r\n# Definición de un vector de números con la secuencia de 1 a 10\r\nvector_secuencia <- seq(1, 10)\r\nvector_secuencia\r\n\r\n\r\n [1]  1  2  3  4  5  6  7  8  9 10\r\n\r\n\r\n# Definición de un vector de números con la secuencia de 0.5 a 15.3, con incremento de 2\r\nvector_secuencia <- seq(from=0.5, to=15.3, by=2)\r\nvector_secuencia\r\n\r\n\r\n[1]  0.5  2.5  4.5  6.5  8.5 10.5 12.5 14.5\r\n\r\n\r\n# Definición de un vector de números con la secuencia de 1.5 a 9.4, con longitud de 4\r\nvector_secuencia <- seq(from=1.5, to=9.4, length.out=4)\r\nvector_secuencia\r\n\r\n\r\n[1] 1.500000 4.133333 6.766667 9.400000\r\n\r\nIndexación\r\nLos elementos de un vector se acceden a través de sus índices (i.e. posiciones). La primera posición corresponde al índice 1, la segunda al índice 2 y así sucesivamente. Los índices se especifican entre paréntesis cuadrados ([]), ya sea para una posición específica o para un rango de posiciones. También es posible especificar los índices que se desea excluir.\r\n\r\n\r\n# Vector de nombres de países\r\npaises <- c(\"Argentina\", \"Francia\", \"China\", \"Australia\", \"México\")\r\npaises\r\n\r\n\r\n[1] \"Argentina\" \"Francia\"   \"China\"     \"Australia\" \"México\"   \r\n\r\n\r\n# Elemento en el índice 3\r\npaises[3]\r\n\r\n\r\n[1] \"China\"\r\n\r\nEl operador : puede utilizarse para especificar un rango de índices:\r\n\r\n\r\n# Elementos entre los índices 2 y 4 (2, 3 y 4)\r\npaises[2:4]\r\n\r\n\r\n[1] \"Francia\"   \"China\"     \"Australia\"\r\n\r\nCon la función c(), es posible especificar un conjunto de índices particulares:\r\n\r\n\r\n# Elementos entre los índices 1, 4 y 5\r\npaises[c(1, 4, 5)]\r\n\r\n\r\n[1] \"Argentina\" \"Australia\" \"México\"   \r\n\r\nLos números negativos pueden usarse para excluir índices:\r\n\r\n\r\n# Exclusión de los índices 3 y 4\r\npaises[c(-3, -4)]\r\n\r\n\r\n[1] \"Argentina\" \"Francia\"   \"México\"   \r\n\r\nLos valores lógicos TRUE y FALSE también pueden usarse para incluir y excluir índices de un vector:\r\n\r\n\r\n# Se incluyen los índices 1, 2 y 4; y se excluyen los índices 3 y 5\r\npaises[c(TRUE, TRUE, FALSE, TRUE, FALSE)]\r\n\r\n\r\n[1] \"Argentina\" \"Francia\"   \"Australia\"\r\n\r\nOperaciones\r\nEn los vectores pueden aplicarse operaciones aritméticas:\r\n\r\n\r\na <- c(1, 3, 5, 7)\r\nb <- c(2, 4, 6, 8)\r\n\r\n# Suma de vectores\r\na + b\r\n\r\n\r\n[1]  3  7 11 15\r\n\r\n\r\n# Multiplicación de vectores\r\na * b\r\n\r\n\r\n[1]  2 12 30 56\r\n\r\nY también pueden realizarse operaciones relacionales:\r\n\r\n\r\n# Comparación con el operador <\r\na < b\r\n\r\n\r\n[1] TRUE TRUE TRUE TRUE\r\n\r\nMatrices\r\nUna matriz es una estructura bidimensional de filas y columnas.\r\nDefinición\r\nLas matrices se definen mediante la función matrix().\r\n\r\n\r\n# Definición de una matriz de 3 x 3 con elementos de la secuencia 1:9 distribuidos en las columnas\r\nm <- matrix(1:9, nrow=3, ncol=3)\r\nm\r\n\r\n\r\n     [,1] [,2] [,3]\r\n[1,]    1    4    7\r\n[2,]    2    5    8\r\n[3,]    3    6    9\r\n\r\n\r\n# Definición de una matriz de 3 x 3 con elementos de la secuencia 1:9 distribuidos en las filas\r\nm <- matrix(1:9, nrow=3, ncol=3, byrow=TRUE)\r\nm\r\n\r\n\r\n     [,1] [,2] [,3]\r\n[1,]    1    2    3\r\n[2,]    4    5    6\r\n[3,]    7    8    9\r\n\r\n\r\n# Definición de una matriz de 3 x 2 con nombres para las filas y las columnas\r\ndatos <- c(18, 500, 25, 1000, 30, 2000)\r\nfilas <- c(\"Ana\", \"Mario\", \"Laura\")\r\ncolumnas <- c(\"Edad\", \"Salario\")\r\n\r\nm <- matrix(datos, nrow=3, ncol=2, byrow=TRUE, dimnames=list(filas, columnas))\r\nm\r\n\r\n\r\n      Edad Salario\r\nAna     18     500\r\nMario   25    1000\r\nLaura   30    2000\r\n\r\nLa función list() se utiliza, en este caso, para combinar vectores. En general, se usa para combinar datos de cualquier tipo.\r\nIndexación\r\nLa indexación de matrices es similar a la de vectores, pero deben especificarse índices tanto para filas como para columnas.\r\n\r\n\r\n# Elemento en la posición [2,2] (segunda fila, segunda columna)\r\nm[2, 2]\r\n\r\n\r\n[1] 1000\r\n\r\n\r\n# Elementos de la primera fila\r\nm[1,]\r\n\r\n\r\n   Edad Salario \r\n     18     500 \r\n\r\n\r\n# Elementos de la segunda columna\r\nm[, 2]\r\n\r\n\r\n  Ana Mario Laura \r\n  500  1000  2000 \r\n\r\n\r\n# Elementos de las filas 1 y 2\r\nm[1:2, ]\r\n\r\n\r\n      Edad Salario\r\nAna     18     500\r\nMario   25    1000\r\n\r\n\r\n# Elementos de la fila \"Mario\"\r\nm[\"Mario\", ]\r\n\r\n\r\n   Edad Salario \r\n     25    1000 \r\n\r\n\r\n# Elementos de la columna \"Salario\"\r\nm[, \"Salario\"]\r\n\r\n\r\n  Ana Mario Laura \r\n  500  1000  2000 \r\n\r\nOperaciones\r\nDe manera similar a los vectores, en las matrices pueden realizarse operaciones aritméticas y relacionales.\r\n\r\n\r\na <- matrix(1:4, nrow=2, ncol=2)\r\na\r\n\r\n\r\n     [,1] [,2]\r\n[1,]    1    3\r\n[2,]    2    4\r\n\r\n\r\nb <- matrix(5:8, nrow=2, ncol=2)\r\nb\r\n\r\n\r\n     [,1] [,2]\r\n[1,]    5    7\r\n[2,]    6    8\r\n\r\n\r\n# Suma de matrices\r\na + b\r\n\r\n\r\n     [,1] [,2]\r\n[1,]    6   10\r\n[2,]    8   12\r\n\r\n\r\n# Multiplicación de matrices\r\na * b\r\n\r\n\r\n     [,1] [,2]\r\n[1,]    5   21\r\n[2,]   12   32\r\n\r\n\r\n# Comparación de matrices con el operador >\r\na > b\r\n\r\n\r\n      [,1]  [,2]\r\n[1,] FALSE FALSE\r\n[2,] FALSE FALSE\r\n\r\nTipos compuestos\r\nFactores\r\nLos factores se utilizan para representar datos categóricos. Un factor corresponde a un conjunto de categorías correspondientes a un concepto (ej. [“Sí”, “No”], [“Casado”, “Soltero”], [“Alto”, “Medio”, “Bajo”]).\r\nInternamente, los factores se representan en R como números enteros con etiquetas asociadas. A pesar de que los factores parecen (y pueden funcionar como) hileras de caracteres, en realidad son números y debe tenerse cuidado de no manejarlos como caracteres.\r\nLos elementos de un factor se denominan niveles (levels) y, por defecto, se almacenan en orden alfabético.\r\nDefinición\r\nUn factor se crea con la función factor().\r\n\r\n\r\n# Factor de valores de sexo\r\nsexo <- factor(c(\"Masculino\", \"Femenino\", \"Femenino\", \"Masculino\"))\r\n\r\n\r\n\r\nOperaciones\r\nR proporciona una gran variedad de funciones para manejar factores. Seguidamente, se ejemplifican algunas de estas.\r\n\r\n\r\n# Etiquetas de los niveles\r\nlevels(sexo)\r\n\r\n\r\n[1] \"Femenino\"  \"Masculino\"\r\n\r\n\r\n# Cantidad de niveles\r\nnlevels(sexo)\r\n\r\n\r\n[1] 2\r\n\r\n\r\n# Conteo de elementos de cada uno de los niveles del factor\r\ntable(sexo)\r\n\r\n\r\nsexo\r\n Femenino Masculino \r\n        2         2 \r\n\r\nData Frames\r\nLos data frames son estructuras bidimensionales compuestas por varios vectores, de manera similar a una matriz. Por lo general, las filas de la matriz corresponden a observaciones (o cases) y las columnas a variables. La definición de un data frame puede incluir nombres para cada observación y para cada variable. Los data frames implementan un conjunto de funciones similares a las de una hoja electrónica o la tabla de una base de datos relacional. Son fundamentales para el manejo de datos en R.\r\nDefinición\r\nLa función data.frame() crea un data frame a partir de vectores que serán las columnas del data frame.\r\n\r\n\r\n# Vector de nombres de países\r\npaises <- c(\"PAN\", \"CRI\", \"NIC\", \"SLV\", \"HND\", \"GTM\", \"BLZ\", \"DOM\")\r\n\r\n# Vector de cantidades de habitantes de cada país (en millones)\r\npoblaciones <- c(4.1, 5.0, 6.2, 6.4, 9.2, 16.9, 0.3, 10.6)\r\n\r\n# Creación de un data frame a partir de los dos vectores\r\npoblaciones_paises <- \r\n  data.frame(\r\n    pais = paises, \r\n    poblacion = poblaciones\r\n  )\r\n\r\n# Impresión del data frame\r\npoblaciones_paises\r\n\r\n\r\n  pais poblacion\r\n1  PAN       4.1\r\n2  CRI       5.0\r\n3  NIC       6.2\r\n4  SLV       6.4\r\n5  HND       9.2\r\n6  GTM      16.9\r\n7  BLZ       0.3\r\n8  DOM      10.6\r\n\r\nIndexación\r\nLos datos de un data frame pueden accederse principalmente de dos formas. La primera es mediante la misma sintaxis [fila, columna] que se utiliza en las matrices.\r\n\r\n\r\n# Fila 1\r\npoblaciones_paises[1, ]\r\n\r\n\r\n  pais poblacion\r\n1  PAN       4.1\r\n\r\n\r\n# Filas 1, 5 y 7\r\npoblaciones_paises[c(1, 5, 7), ]\r\n\r\n\r\n  pais poblacion\r\n1  PAN       4.1\r\n5  HND       9.2\r\n7  BLZ       0.3\r\n\r\n\r\n# Columna 2\r\npoblaciones_paises[, 2]\r\n\r\n\r\n[1]  4.1  5.0  6.2  6.4  9.2 16.9  0.3 10.6\r\n\r\n\r\n# Fila 1, columna 2\r\npoblaciones_paises[1, 2]\r\n\r\n\r\n[1] 4.1\r\n\r\n\r\n# Filas 1:4, columna 2\r\npoblaciones_paises[1:4, 2]\r\n\r\n\r\n[1] 4.1 5.0 6.2 6.4\r\n\r\nAdemás, mediante el operador $, es posible acceder a las columnas (i.e. variables) del data frame.\r\n\r\n\r\n# Columna de nombres de países\r\npoblaciones_paises$pais\r\n\r\n\r\n[1] \"PAN\" \"CRI\" \"NIC\" \"SLV\" \"HND\" \"GTM\" \"BLZ\" \"DOM\"\r\n\r\n\r\n# Modificación de los valores de toda una columna\r\npoblaciones_paises$poblacion = poblaciones_paises$poblacion*2\r\npoblaciones_paises\r\n\r\n\r\n  pais poblacion\r\n1  PAN       8.2\r\n2  CRI      10.0\r\n3  NIC      12.4\r\n4  SLV      12.8\r\n5  HND      18.4\r\n6  GTM      33.8\r\n7  BLZ       0.6\r\n8  DOM      21.2\r\n\r\nOperaciones\r\nR proporciona una gran variedad de funciones para manejar data frames. Las siguientes son algunas de las más utilizadas.\r\nLa función read.table() lee los datos contenidos en un archivo de texto y los retorna en un data frame. read.csv() es una función derivada, con valores por defecto orientados a los archivos de valores separados por comas (CSV, Comma Separated Values). Como argumento principal, read.csv() recibe la ruta del archivo CSV, el cual puede encontrarse en un disco local, en la Web o en otra ubicación.\r\n\r\n\r\n# Lectura de archivo CSV ubicado en la Web\r\ncovid <- \r\n  read.csv(\"https://raw.githubusercontent.com/tpb728O-programaciongeoespacialr/2021ii/main/datos/cepredenac/covid/04_22_21_CSV_GENERAL_CENTROAMERICA.csv\")\r\n\r\ncovid\r\n\r\n\r\n  pais fallecidos recuperados activos positivos\r\n1  PAN       6198      351949    3845    361992\r\n2  CRI       3125      199779   32370    235274\r\n3  GTM       7345      194075   16725    218145\r\n4  HND       4981       77020  121358    203359\r\n5  SLV       2089       64208    1864     68161\r\n6  BLZ        318       12164     114     12596\r\n7  NIC        181        5212      57      5450\r\n\r\n Ejercicio:\r\na. Descargue el archivo del ejemplo anterior (https://raw.githubusercontent.com/tpb728O-programaciongeoespacialr/2021ii/main/datos/cepredenac/covid/04_22_21_CSV_GENERAL_CENTROAMERICA.csv) en su computadora y cárguelo en otro data frame mediante read.csv(). \r\nLa función str() despliega la estructura de un objeto R.\r\n\r\n\r\n# Estructura del data frame\r\nstr(poblaciones_paises)\r\n\r\n\r\n'data.frame':   8 obs. of  2 variables:\r\n $ pais     : chr  \"PAN\" \"CRI\" \"NIC\" \"SLV\" ...\r\n $ poblacion: num  8.2 10 12.4 12.8 18.4 33.8 0.6 21.2\r\n\r\nLa función summary() proporciona un resumen de los contenidos de un data frame:\r\n\r\n\r\n# Resumen de los contenidos del data frame\r\nsummary(poblaciones_paises)\r\n\r\n\r\n     pais             poblacion    \r\n Length:8           Min.   : 0.60  \r\n Class :character   1st Qu.: 9.55  \r\n Mode  :character   Median :12.60  \r\n                    Mean   :14.68  \r\n                    3rd Qu.:19.10  \r\n                    Max.   :33.80  \r\n\r\nLa función View() invoca un visor de datos que permite visualizar un objeto R en un formato de tabla en una hoja de cálculo. Ejecute en su computadora la siguiente línea de código para apreciar el funcionamiento de View().\r\n\r\n\r\n# Vista de los casos de COVID-19\r\nView(covid, \"Casos de COVID-19 en Centramérica\")\r\n\r\n\r\n\r\nOtros\r\nFechas\r\nLas fecha se manejan en R mediante un tipo especial que permite realizar operaciones como diferencias, agrupamientos y otras. Internamente, las fechas en R se almacenan como un número que representa la cantidad de días transcurridos desde el 1 de enero de 1970 (1970-01-01).\r\nOperaciones\r\nLa función Sys.Date() retorna la fecha actual.\r\n\r\n\r\n# Fecha actual\r\nfecha_actual <- Sys.Date()\r\nfecha_actual\r\n\r\n\r\n[1] \"2021-08-11\"\r\n\r\n\r\n# Tipo de datos\r\ntypeof(fecha_actual)\r\n\r\n\r\n[1] \"double\"\r\n\r\n\r\n# Clase\r\nclass(fecha_actual)\r\n\r\n\r\n[1] \"Date\"\r\n\r\nLa función as.Date() convierte datos entre los tipos fecha y carácter, de acuerdo con un formato.\r\n\r\n\r\n# Conversión de fecha en formato año-mes-día\r\nfecha_caracter_01 <- \"2020-01-01\"\r\nfecha_01 <- as.Date(fecha_caracter_01, format=\"%Y-%m-%d\")\r\nfecha_01\r\n\r\n\r\n[1] \"2020-01-01\"\r\n\r\n\r\n# Conversión de fecha en formato día/mes/año\r\nfecha_caracter_02 <- \"31/01/2020\"\r\nfecha_02 <- as.Date(fecha_caracter_02, format=\"%d/%m/%Y\")\r\nfecha_02\r\n\r\n\r\n[1] \"2020-01-31\"\r\n\r\n\r\n# Diferencia entre fechas\r\nfecha_02 - fecha_01\r\n\r\n\r\nTime difference of 30 days\r\n\r\nHay una lista de formatos de fechas en Date Formats in R - R-bloggers.\r\n\r\n\r\n\r\n",
      "last_modified": "2021-08-11T12:31:07-06:00"
    }
  ],
  "collections": []
}
